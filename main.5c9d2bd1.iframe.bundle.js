(self.webpackChunk_perfectmemory_ngx_contextmenu=self.webpackChunk_perfectmemory_ngx_contextmenu||[]).push([[179],{"./projects/ngx-contextmenu/src/assets/stylesheets/base.scss?ngGlobalStyle":()=>{},"./src/stories/assets/stylesheets/index.scss?ngGlobalStyle":()=>{},"./.storybook/preview.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,parameters:()=>parameters});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"ContextMenuAnchoredToElementEvent","id":"interface-ContextMenuAnchoredToElementEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"anchoredTo","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Open the menu anchored to a DOM element</p>\\n","line":38,"rawdescription":"\\n\\nOpen the menu anchored to a DOM element\\n"},{"name":"anchorElement","deprecated":false,"deprecationMessage":"","type":"Element | EventTarget","optional":false,"description":"<p>The anchor element to display the menu next to</p>\\n","line":42,"rawdescription":"\\n\\nThe anchor element to display the menu next to\\n"},{"name":"parentContextMenu","deprecated":false,"deprecationMessage":"","type":"ContextMenuContentComponent<T>","optional":false,"description":"<p>The parent context menu from which this menu will be displayed</p>\\n","line":46,"rawdescription":"\\n\\nThe parent context menu from which this menu will be displayed\\n"}],"indexSignatures":[],"kind":165,"methods":[],"extends":"ContextMenuBaseEvent"},{"name":"ContextMenuAnchoredToPositionEvent","id":"interface-ContextMenuAnchoredToPositionEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"anchoredTo","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Open the menu to an x/y position</p>\\n","line":22,"rawdescription":"\\n\\nOpen the menu to an x/y position\\n"},{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The horizontal position of the menu</p>\\n","line":26,"rawdescription":"\\n\\nThe horizontal position of the menu\\n"},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The vertical position of the menu</p>\\n","line":30,"rawdescription":"\\n\\nThe vertical position of the menu\\n"}],"indexSignatures":[],"kind":165,"methods":[],"extends":"ContextMenuBaseEvent"},{"name":"ContextMenuBaseEvent","id":"interface-ContextMenuBaseEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"anchoredTo","deprecated":false,"deprecationMessage":"","type":"\\"position\\" | \\"element\\"","optional":false,"description":"","line":6},{"name":"contextMenu","deprecated":false,"deprecationMessage":"","type":"ContextMenuComponent<T>","optional":false,"description":"<p>ContextMenuComponent instance to display</p>\\n","line":10,"rawdescription":"\\n\\nContextMenuComponent instance to display\\n"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"<p>Optional associated data to the context menu, will be emitted when a menu item is selected</p>\\n","line":14,"rawdescription":"\\n\\nOptional associated data to the context menu, will be emitted when a menu item is selected\\n"}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuCancelEvent","id":"interface-ContextMenuCancelEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":true,"deprecationMessage":"Not used any more","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"eventType","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":67}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuCloseLeafEvent","id":"interface-ContextMenuCloseLeafEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"event","deprecated":false,"deprecationMessage":"","type":"MouseEvent | KeyboardEvent","optional":true,"description":"","line":60},{"name":"excludeRootMenu","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"","line":59}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuExecuteEvent","id":"interface-ContextMenuExecuteEvent-19c7c344415df7d8186bd07a8251154d5703f0cf831fc255efa616b101c04adba43dfd3c7bd6117aa5d9b6cd6247c0c34090b859daef719dbd0659bd01ac513f","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":true,"deprecationMessage":"Not used any more","type":"interface","sourceCode":"import { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./context-menu.component\';\\n\\nexport interface ContextMenuBaseEvent<T> {\\n  anchoredTo: \'position\' | \'element\';\\n  /**\\n   * ContextMenuComponent instance to display\\n   */\\n  contextMenu: ContextMenuComponent<T>;\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n}\\n\\nexport interface ContextMenuAnchoredToPositionEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu to an x/y position\\n   */\\n  anchoredTo: \'position\';\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\nexport interface ContextMenuAnchoredToElementEvent<T>\\n  extends ContextMenuBaseEvent<T> {\\n  /**\\n   * Open the menu anchored to a DOM element\\n   */\\n  anchoredTo: \'element\';\\n  /**\\n   * The anchor element to display the menu next to\\n   */\\n  anchorElement: Element | EventTarget;\\n  /**\\n   * The parent context menu from which this menu will be displayed\\n   */\\n  parentContextMenu: ContextMenuContentComponent<T>;\\n}\\n\\nexport type ContextMenuOpenEvent<T> =\\n  | ContextMenuAnchoredToPositionEvent<T>\\n  | ContextMenuAnchoredToElementEvent<T>;\\n\\nexport type IContextMenuContext<T> = ContextMenuOpenEvent<T> & {\\n  menuItemDirectives: ContextMenuItemDirective<T>[];\\n  menuClass: string;\\n  dir: \'ltr\' | \'rtl\' | undefined;\\n};\\nexport interface ContextMenuCloseLeafEvent {\\n  excludeRootMenu?: boolean;\\n  event?: MouseEvent | KeyboardEvent;\\n}\\n\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuCancelEvent {\\n  eventType: \'cancel\';\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport interface ContextMenuExecuteEvent<T extends Object = any> {\\n  eventType: \'execute\';\\n  item?: T;\\n  menuDirective: ContextMenuItemDirective<T>;\\n}\\n/**\\n * @deprecated Not used any more\\n */\\nexport type ContextMenuCloseEvent<T extends Object = any> =\\n  | ContextMenuExecuteEvent<T>\\n  | ContextMenuCancelEvent;\\n","properties":[{"name":"eventType","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":73},{"name":"item","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"","line":74},{"name":"menuDirective","deprecated":false,"deprecationMessage":"","type":"ContextMenuItemDirective<T>","optional":false,"description":"","line":75}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuOpenAtElementOptions","id":"interface-ContextMenuOpenAtElementOptions-498ecd6aa27c137b30253b5fb8b1685c7c5fedff51ab0286b988ab9e46e2f68d7ef4acb2ab97ecedab65eaa89b3ab6e83156e7d8cb2db52819f29c8484d3441a","file":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { ContextMenuComponent } from \'../../components/context-menu/context-menu.component\';\\nimport { ContextMenuEventService } from \'../context-menu-event/context-menu-event.service\';\\nimport { ContextMenuStackService } from \'../context-menu-stack/context-menu-stack.service\';\\n\\nexport interface ContextMenuOpenAtPositionOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\nexport interface ContextMenuOpenAtElementOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\n/**\\n * Programmatically open a ContextMenuComponent to a X/Y position\\n */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuService<T> {\\n  constructor(private contextMenuEventService: ContextMenuEventService<T>,\\n              private contextMenuStackService: ContextMenuStackService<T>) {}\\n  /**\\n   * Show the given `ContextMenuComponent` at a specified X/Y position\\n   */\\n  public show(\\n    contextMenu: ContextMenuComponent<T>,\\n    options: ContextMenuOpenAtPositionOptions<T> = { x: 0, y: 0 }\\n  ) {\\n    this.contextMenuEventService.show({\\n      anchoredTo: \'position\',\\n      contextMenu,\\n      value: options.value,\\n      x: options.x,\\n      y: options.y,\\n    });\\n  }\\n\\n  /**\\n   * Close all open `ContextMenuComponent`\\n   */\\n  public closeAll(): void {\\n    this.contextMenuStackService.closeAll();\\n  }\\n\\n  /**\\n   * Return true if any `ContextMenuComponent` is open\\n   */\\n  public hasOpenMenu(): boolean {\\n    return !this.contextMenuStackService.isEmpty();\\n  }\\n}\\n","properties":[{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"<p>Optional associated data to the context menu, will be emitted when a menu item is selected</p>\\n","line":24,"rawdescription":"\\n\\nOptional associated data to the context menu, will be emitted when a menu item is selected\\n"},{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The horizontal position of the menu</p>\\n","line":28,"rawdescription":"\\n\\nThe horizontal position of the menu\\n"},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The vertical position of the menu</p>\\n","line":32,"rawdescription":"\\n\\nThe vertical position of the menu\\n"}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuOpenAtPositionOptions","id":"interface-ContextMenuOpenAtPositionOptions-498ecd6aa27c137b30253b5fb8b1685c7c5fedff51ab0286b988ab9e46e2f68d7ef4acb2ab97ecedab65eaa89b3ab6e83156e7d8cb2db52819f29c8484d3441a","file":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { ContextMenuComponent } from \'../../components/context-menu/context-menu.component\';\\nimport { ContextMenuEventService } from \'../context-menu-event/context-menu-event.service\';\\nimport { ContextMenuStackService } from \'../context-menu-stack/context-menu-stack.service\';\\n\\nexport interface ContextMenuOpenAtPositionOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\nexport interface ContextMenuOpenAtElementOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\n/**\\n * Programmatically open a ContextMenuComponent to a X/Y position\\n */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuService<T> {\\n  constructor(private contextMenuEventService: ContextMenuEventService<T>,\\n              private contextMenuStackService: ContextMenuStackService<T>) {}\\n  /**\\n   * Show the given `ContextMenuComponent` at a specified X/Y position\\n   */\\n  public show(\\n    contextMenu: ContextMenuComponent<T>,\\n    options: ContextMenuOpenAtPositionOptions<T> = { x: 0, y: 0 }\\n  ) {\\n    this.contextMenuEventService.show({\\n      anchoredTo: \'position\',\\n      contextMenu,\\n      value: options.value,\\n      x: options.x,\\n      y: options.y,\\n    });\\n  }\\n\\n  /**\\n   * Close all open `ContextMenuComponent`\\n   */\\n  public closeAll(): void {\\n    this.contextMenuStackService.closeAll();\\n  }\\n\\n  /**\\n   * Return true if any `ContextMenuComponent` is open\\n   */\\n  public hasOpenMenu(): boolean {\\n    return !this.contextMenuStackService.isEmpty();\\n  }\\n}\\n","properties":[{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"<p>Optional associated data to the context menu, will be emitted when a menu item is selected</p>\\n","line":10,"rawdescription":"\\n\\nOptional associated data to the context menu, will be emitted when a menu item is selected\\n"},{"name":"x","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The horizontal position of the menu</p>\\n","line":14,"rawdescription":"\\n\\nThe horizontal position of the menu\\n"},{"name":"y","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>The vertical position of the menu</p>\\n","line":18,"rawdescription":"\\n\\nThe vertical position of the menu\\n"}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"ContextMenuStackItem","id":"interface-ContextMenuStackItem-6539df2366e9e5cb9f9de7e113dbb5b3343a41688176aab49e0556511da431ccf888fdc5fb5926e1abc7ea31e3ae60e3a1e76aef92e02ce646057b6107f4b1f5","file":"projects/ngx-contextmenu/src/lib/services/context-menu-stack/context-menu-stack.service.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { OverlayRef } from \'@angular/cdk/overlay\';\\nimport { Injectable } from \'@angular/core\';\\nimport { ContextMenuContentComponent } from \'../../components/context-menu-content/context-menu-content.component\';\\n\\nexport interface ContextMenuStackItem<T> {\\n  overlayRef: OverlayRef;\\n  contextMenuContentComponent: ContextMenuContentComponent<T>;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuStackService<T> {\\n  private stack: ContextMenuStackItem<T>[] = [];\\n\\n  /**\\n   * Add an item to the stack\\n   */\\n  public push(value: ContextMenuStackItem<T>) {\\n    this.stack.push(value);\\n  }\\n\\n  /**\\n   * Return the stack size\\n   */\\n  public size(): number {\\n    return this.stack.length;\\n  }\\n\\n  /**\\n   * Return true if the stack is empty\\n   */\\n  public isEmpty(): boolean {\\n    return this.size() === 0;\\n  }\\n\\n  /**\\n   * Clear the whole stack\\n   */\\n  public closeAll(): void {\\n    this.stack.forEach((item) => this.dispose(item));\\n    this.stack = [];\\n  }\\n\\n  /**\\n   * Detach and dispose sub menu\'s overlays of the given ContextMenuContentComponent\\n   */\\n  public destroySubMenus(contextMenu: ContextMenuContentComponent<T>): void {\\n    if (!contextMenu) {\\n      return;\\n    }\\n\\n    const index = this.stack.findIndex(\\n      ({ overlayRef }) => overlayRef === contextMenu.overlayRef\\n    );\\n    this.stack.slice(index + 1).forEach((item) => {\\n      this.dispose(item);\\n    });\\n  }\\n\\n  /**\\n   * Destroy leaf menu and return true if the destroyed menu is the root\\n   */\\n  public closeLeafMenu(excludeRootMenu: boolean): boolean {\\n    const item = this.disposeLastDetached();\\n\\n    if (!item) {\\n      return false;\\n    }\\n\\n    const moreThanOneItem = this.size() > 1;\\n    const isNotEmptyAndDoesNotExcludeRootMenu =\\n      !excludeRootMenu && !this.isEmpty();\\n\\n    if (moreThanOneItem || isNotEmptyAndDoesNotExcludeRootMenu) {\\n      this.dispose(item);\\n    }\\n\\n    if (isNotEmptyAndDoesNotExcludeRootMenu) {\\n      return true;\\n    }\\n\\n    const newValue = this.disposeLastDetached();\\n\\n    if (newValue) {\\n      newValue.contextMenuContentComponent.isLeaf = true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * Starting by most recent items, dispose all detached item and return the most recent attached one\\n   */\\n  private disposeLastDetached(): ContextMenuStackItem<T> | undefined {\\n    let item = this.last();\\n\\n    if (!item) {\\n      return;\\n    }\\n\\n    while (\\n      item &&\\n      this.size() > 1 &&\\n      item.overlayRef &&\\n      this.isDetached(item)\\n    ) {\\n      this.dispose(item);\\n      this.pop();\\n      item = this.last();\\n    }\\n    return item;\\n  }\\n\\n  private last(): ContextMenuStackItem<T> | undefined {\\n    if (this.isEmpty()) {\\n      return;\\n    }\\n\\n    return this.stack[this.stack.length - 1];\\n  }\\n\\n  private pop(): ContextMenuStackItem<T> | undefined {\\n    const value = this.stack.pop();\\n    return this.dispose(value);\\n  }\\n\\n  private isDetached(item: ContextMenuStackItem<T>): boolean {\\n    return !item.overlayRef.hasAttached();\\n  }\\n\\n  private dispose(\\n    item: ContextMenuStackItem<T> | undefined\\n  ): ContextMenuStackItem<T> | undefined {\\n    if (item) {\\n      item.overlayRef.detach();\\n      item.overlayRef.dispose();\\n    }\\n\\n    return item;\\n  }\\n}\\n","properties":[{"name":"contextMenuContentComponent","deprecated":false,"deprecationMessage":"","type":"ContextMenuContentComponent<T>","optional":false,"description":"","line":7},{"name":"overlayRef","deprecated":false,"deprecationMessage":"","type":"OverlayRef","optional":false,"description":"","line":6}],"indexSignatures":[],"kind":165,"methods":[]}],"injectables":[{"name":"ContextMenuEventService","id":"injectable-ContextMenuEventService-0d12ae645bccd3420fdfe1b6fe2149bf369ac6163eba3fa3f1bac315b0530c3873a70863c26167c41d9b5b7191a95ecd7bc12a67512afe6cfeed9ec2dfffe48d","file":"projects/ngx-contextmenu/src/lib/services/context-menu-event/context-menu-event.service.ts","properties":[{"name":"onShow","defaultValue":"new Subject()","deprecated":false,"deprecationMessage":"","type":"Subject<ContextMenuOpenEvent<T>>","optional":false,"description":"","line":12,"modifierKind":[123]}],"methods":[{"name":"show","args":[{"name":"options","type":"ContextMenuOpenEvent<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":14,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"options","type":"ContextMenuOpenEvent<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { Subject } from \'rxjs\';\\nimport { ContextMenuOpenEvent } from \'../../components/context-menu/context-menu.component.interface\';\\n\\n/**\\n * @internal\\n */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuEventService<T> {\\n  public onShow: Subject<ContextMenuOpenEvent<T>> = new Subject();\\n\\n  public show(options: ContextMenuOpenEvent<T>) {\\n    this.onShow.next(options);\\n  }\\n}\\n","type":"injectable"},{"name":"ContextMenuService","id":"injectable-ContextMenuService-498ecd6aa27c137b30253b5fb8b1685c7c5fedff51ab0286b988ab9e46e2f68d7ef4acb2ab97ecedab65eaa89b3ab6e83156e7d8cb2db52819f29c8484d3441a","file":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","properties":[],"methods":[{"name":"closeAll","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":63,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClose all open `ContextMenuComponent`\\n","description":"<p>Close all open <code>ContextMenuComponent</code></p>\\n","modifierKind":[123]},{"name":"hasOpenMenu","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturn true if any `ContextMenuComponent` is open\\n","description":"<p>Return true if any <code>ContextMenuComponent</code> is open</p>\\n","modifierKind":[123]},{"name":"show","args":[{"name":"contextMenu","type":"ContextMenuComponent<T>","deprecated":false,"deprecationMessage":""},{"name":"options","type":"ContextMenuOpenAtPositionOptions<T>","deprecated":false,"deprecationMessage":"","defaultValue":"{ x: 0, y: 0 }"}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nShow the given `ContextMenuComponent` at a specified X/Y position\\n","description":"<p>Show the given <code>ContextMenuComponent</code> at a specified X/Y position</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"contextMenu","type":"ContextMenuComponent<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"options","type":"ContextMenuOpenAtPositionOptions<T>","deprecated":false,"deprecationMessage":"","defaultValue":"{ x: 0, y: 0 }","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>Programmatically open a ContextMenuComponent to a X/Y position</p>\\n","rawdescription":"\\n\\nProgrammatically open a ContextMenuComponent to a X/Y position\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\nimport { ContextMenuComponent } from \'../../components/context-menu/context-menu.component\';\\nimport { ContextMenuEventService } from \'../context-menu-event/context-menu-event.service\';\\nimport { ContextMenuStackService } from \'../context-menu-stack/context-menu-stack.service\';\\n\\nexport interface ContextMenuOpenAtPositionOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\nexport interface ContextMenuOpenAtElementOptions<T> {\\n  /**\\n   * Optional associated data to the context menu, will be emitted when a menu item is selected\\n   */\\n  value?: T;\\n  /**\\n   * The horizontal position of the menu\\n   */\\n  x: number;\\n  /**\\n   * The vertical position of the menu\\n   */\\n  y: number;\\n}\\n\\n/**\\n * Programmatically open a ContextMenuComponent to a X/Y position\\n */\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuService<T> {\\n  constructor(private contextMenuEventService: ContextMenuEventService<T>,\\n              private contextMenuStackService: ContextMenuStackService<T>) {}\\n  /**\\n   * Show the given `ContextMenuComponent` at a specified X/Y position\\n   */\\n  public show(\\n    contextMenu: ContextMenuComponent<T>,\\n    options: ContextMenuOpenAtPositionOptions<T> = { x: 0, y: 0 }\\n  ) {\\n    this.contextMenuEventService.show({\\n      anchoredTo: \'position\',\\n      contextMenu,\\n      value: options.value,\\n      x: options.x,\\n      y: options.y,\\n    });\\n  }\\n\\n  /**\\n   * Close all open `ContextMenuComponent`\\n   */\\n  public closeAll(): void {\\n    this.contextMenuStackService.closeAll();\\n  }\\n\\n  /**\\n   * Return true if any `ContextMenuComponent` is open\\n   */\\n  public hasOpenMenu(): boolean {\\n    return !this.contextMenuStackService.isEmpty();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":""},{"name":"contextMenuStackService","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":""}],"line":41,"jsdoctags":[{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextMenuStackService","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"type":"injectable"},{"name":"ContextMenuStackService","id":"injectable-ContextMenuStackService-6539df2366e9e5cb9f9de7e113dbb5b3343a41688176aab49e0556511da431ccf888fdc5fb5926e1abc7ea31e3ae60e3a1e76aef92e02ce646057b6107f4b1f5","file":"projects/ngx-contextmenu/src/lib/services/context-menu-stack/context-menu-stack.service.ts","properties":[{"name":"stack","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"ContextMenuStackItem<T>[]","optional":false,"description":"","line":14,"modifierKind":[121]}],"methods":[{"name":"closeAll","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nClear the whole stack\\n","description":"<p>Clear the whole stack</p>\\n","modifierKind":[123]},{"name":"closeLeafMenu","args":[{"name":"excludeRootMenu","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDestroy leaf menu and return true if the destroyed menu is the root\\n","description":"<p>Destroy leaf menu and return true if the destroyed menu is the root</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"excludeRootMenu","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"destroySubMenus","args":[{"name":"contextMenu","type":"ContextMenuContentComponent<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":48,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDetach and dispose sub menu\'s overlays of the given ContextMenuContentComponent\\n","description":"<p>Detach and dispose sub menu&#39;s overlays of the given ContextMenuContentComponent</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"contextMenu","type":"ContextMenuContentComponent<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"dispose","args":[{"name":"item","type":"ContextMenuStackItem<T> | undefined","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ContextMenuStackItem | undefined","typeParameters":[],"line":132,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"item","type":"ContextMenuStackItem<T> | undefined","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"disposeLastDetached","args":[],"optional":false,"returnType":"ContextMenuStackItem | undefined","typeParameters":[],"line":95,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nStarting by most recent items, dispose all detached item and return the most recent attached one\\n","description":"<p>Starting by most recent items, dispose all detached item and return the most recent attached one</p>\\n","modifierKind":[121]},{"name":"isDetached","args":[{"name":"item","type":"ContextMenuStackItem<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"item","type":"ContextMenuStackItem<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isEmpty","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":33,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturn true if the stack is empty\\n","description":"<p>Return true if the stack is empty</p>\\n","modifierKind":[123]},{"name":"last","args":[],"optional":false,"returnType":"ContextMenuStackItem | undefined","typeParameters":[],"line":115,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"pop","args":[],"optional":false,"returnType":"ContextMenuStackItem | undefined","typeParameters":[],"line":123,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"push","args":[{"name":"value","type":"ContextMenuStackItem<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":19,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd an item to the stack\\n","description":"<p>Add an item to the stack</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"value","type":"ContextMenuStackItem<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"size","args":[],"optional":false,"returnType":"number","typeParameters":[],"line":26,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nReturn the stack size\\n","description":"<p>Return the stack size</p>\\n","modifierKind":[123]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { OverlayRef } from \'@angular/cdk/overlay\';\\nimport { Injectable } from \'@angular/core\';\\nimport { ContextMenuContentComponent } from \'../../components/context-menu-content/context-menu-content.component\';\\n\\nexport interface ContextMenuStackItem<T> {\\n  overlayRef: OverlayRef;\\n  contextMenuContentComponent: ContextMenuContentComponent<T>;\\n}\\n\\n@Injectable({\\n  providedIn: \'root\',\\n})\\nexport class ContextMenuStackService<T> {\\n  private stack: ContextMenuStackItem<T>[] = [];\\n\\n  /**\\n   * Add an item to the stack\\n   */\\n  public push(value: ContextMenuStackItem<T>) {\\n    this.stack.push(value);\\n  }\\n\\n  /**\\n   * Return the stack size\\n   */\\n  public size(): number {\\n    return this.stack.length;\\n  }\\n\\n  /**\\n   * Return true if the stack is empty\\n   */\\n  public isEmpty(): boolean {\\n    return this.size() === 0;\\n  }\\n\\n  /**\\n   * Clear the whole stack\\n   */\\n  public closeAll(): void {\\n    this.stack.forEach((item) => this.dispose(item));\\n    this.stack = [];\\n  }\\n\\n  /**\\n   * Detach and dispose sub menu\'s overlays of the given ContextMenuContentComponent\\n   */\\n  public destroySubMenus(contextMenu: ContextMenuContentComponent<T>): void {\\n    if (!contextMenu) {\\n      return;\\n    }\\n\\n    const index = this.stack.findIndex(\\n      ({ overlayRef }) => overlayRef === contextMenu.overlayRef\\n    );\\n    this.stack.slice(index + 1).forEach((item) => {\\n      this.dispose(item);\\n    });\\n  }\\n\\n  /**\\n   * Destroy leaf menu and return true if the destroyed menu is the root\\n   */\\n  public closeLeafMenu(excludeRootMenu: boolean): boolean {\\n    const item = this.disposeLastDetached();\\n\\n    if (!item) {\\n      return false;\\n    }\\n\\n    const moreThanOneItem = this.size() > 1;\\n    const isNotEmptyAndDoesNotExcludeRootMenu =\\n      !excludeRootMenu && !this.isEmpty();\\n\\n    if (moreThanOneItem || isNotEmptyAndDoesNotExcludeRootMenu) {\\n      this.dispose(item);\\n    }\\n\\n    if (isNotEmptyAndDoesNotExcludeRootMenu) {\\n      return true;\\n    }\\n\\n    const newValue = this.disposeLastDetached();\\n\\n    if (newValue) {\\n      newValue.contextMenuContentComponent.isLeaf = true;\\n    }\\n\\n    return false;\\n  }\\n\\n  /**\\n   * Starting by most recent items, dispose all detached item and return the most recent attached one\\n   */\\n  private disposeLastDetached(): ContextMenuStackItem<T> | undefined {\\n    let item = this.last();\\n\\n    if (!item) {\\n      return;\\n    }\\n\\n    while (\\n      item &&\\n      this.size() > 1 &&\\n      item.overlayRef &&\\n      this.isDetached(item)\\n    ) {\\n      this.dispose(item);\\n      this.pop();\\n      item = this.last();\\n    }\\n    return item;\\n  }\\n\\n  private last(): ContextMenuStackItem<T> | undefined {\\n    if (this.isEmpty()) {\\n      return;\\n    }\\n\\n    return this.stack[this.stack.length - 1];\\n  }\\n\\n  private pop(): ContextMenuStackItem<T> | undefined {\\n    const value = this.stack.pop();\\n    return this.dispose(value);\\n  }\\n\\n  private isDetached(item: ContextMenuStackItem<T>): boolean {\\n    return !item.overlayRef.hasAttached();\\n  }\\n\\n  private dispose(\\n    item: ContextMenuStackItem<T> | undefined\\n  ): ContextMenuStackItem<T> | undefined {\\n    if (item) {\\n      item.overlayRef.detach();\\n      item.overlayRef.dispose();\\n    }\\n\\n    return item;\\n  }\\n}\\n","type":"injectable"}],"guards":[],"interceptors":[],"classes":[],"directives":[{"name":"ContextMenuDirective","id":"directive-ContextMenuDirective-79118dc86d10ce365bb19b7424514a4723fbe86c960c4e47361a2c1090b5ea9a95f21150cc6e6280f99582357cb2bf918eed2b2ea0210e522f1fbf29e21e32ea","file":"projects/ngx-contextmenu/src/lib/directives/context-menu/context-menu.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import {\\n  Directive,\\n  ElementRef,\\n  HostBinding,\\n  HostListener,\\n  Input,\\n} from \'@angular/core\';\\nimport { ContextMenuComponent } from \'../../components/context-menu/context-menu.component\';\\nimport { ContextMenuEventService } from \'../../services/context-menu-event/context-menu-event.service\';\\nimport { ContextMenuStackService } from \'../../services/context-menu-stack/context-menu-stack.service\';\\n\\n@Directive({\\n  selector: \'[contextMenu]\',\\n  exportAs: \'ngxContextMenu\',\\n})\\nexport class ContextMenuDirective<T> {\\n  /**\\n   * The value related to the context menu\\n   */\\n  @Input()\\n  public contextMenuValue!: T;\\n\\n  /**\\n   * The component holding the menu item directive templates\\n   */\\n  @Input()\\n  public contextMenu!: ContextMenuComponent<T>;\\n\\n  /**\\n   * The directive must have a tabindex for being accessible\\n   */\\n  @Input()\\n  @HostBinding(\'attr.tabindex\')\\n  public tabindex: string | number = \'0\';\\n\\n  /**\\n   * Accessibility\\n   *\\n   * @internal\\n   */\\n  @HostBinding(\'attr.aria-haspopup\')\\n  public ariaHasPopup = \'true\';\\n\\n  constructor(\\n    private contextMenuEventService: ContextMenuEventService<T>,\\n    private elementRef: ElementRef<HTMLElement>,\\n    private contextMenuStackService: ContextMenuStackService<T>\\n  ) {}\\n\\n  /**\\n   * Programmatically open the context menu\\n   */\\n  public open(event?: MouseEvent): void {\\n    if (!this.canOpen()) {\\n      return;\\n    }\\n\\n    if (event instanceof MouseEvent) {\\n      this.onContextMenu(event);\\n      return;\\n    }\\n\\n    const { x, y, height } =\\n      this.elementRef.nativeElement.getBoundingClientRect();\\n\\n    this.contextMenuEventService.show({\\n      anchoredTo: \'position\',\\n      x,\\n      y: y + height,\\n      contextMenu: this.contextMenu,\\n      value: this.contextMenuValue,\\n    });\\n  }\\n\\n  /**\\n   * Programmatically close the context menu\\n   */\\n  public close(): void {\\n    this.contextMenuStackService.closeAll();\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'contextmenu\', [\'$event\'])\\n  public onContextMenu(event: MouseEvent): void {\\n    if (!this.canOpen()) {\\n      return;\\n    }\\n\\n    this.contextMenuEventService.show({\\n      anchoredTo: \'position\',\\n      contextMenu: this.contextMenu,\\n      x: event.clientX,\\n      y: event.clientY,\\n      value: this.contextMenuValue,\\n    });\\n    event.preventDefault();\\n    event.stopPropagation();\\n  }\\n\\n  private canOpen(): boolean {\\n    return this.contextMenu && !this.contextMenu.disabled;\\n  }\\n}\\n","selector":"[contextMenu]","providers":[],"inputsClass":[{"name":"contextMenu","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe component holding the menu item directive templates\\n","description":"<p>The component holding the menu item directive templates</p>\\n","line":27,"type":"ContextMenuComponent<T>","decorators":[]},{"name":"contextMenuValue","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe value related to the context menu\\n","description":"<p>The value related to the context menu</p>\\n","line":21,"type":"T","decorators":[]},{"name":"tabindex","defaultValue":"\'0\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe directive must have a tabindex for being accessible\\n","description":"<p>The directive must have a tabindex for being accessible</p>\\n","line":34,"type":"string | number","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.aria-haspopup","defaultValue":"\'true\'","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":941,"end":954,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":942,"end":950,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"rawdescription":"\\n\\nAccessibility\\n\\n","description":"<p>Accessibility</p>\\n","line":42,"type":"string","decorators":[]}],"hostListeners":[{"name":"contextmenu","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":1887,"end":1900,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1888,"end":1896,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":86}],"propertiesClass":[{"name":"ariaHasPopup","defaultValue":"\'true\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Accessibility</p>\\n","line":42,"rawdescription":"\\n\\nAccessibility\\n\\n","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.aria-haspopup\'"}],"modifierKind":[123],"jsdoctags":[{"pos":941,"end":954,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":942,"end":950,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]}],"methodsClass":[{"name":"canOpen","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":78,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nProgrammatically close the context menu\\n","description":"<p>Programmatically close the context menu</p>\\n","modifierKind":[123]},{"name":"onContextMenu","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":86,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'contextmenu\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"open","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":53,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nProgrammatically open the context menu\\n","description":"<p>Programmatically open the context menu</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":""},{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":""},{"name":"contextMenuStackService","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":""}],"line":42,"jsdoctags":[{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextMenuStackService","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"ContextMenuItemDirective","id":"directive-ContextMenuItemDirective-85f4f0f726fc2298f8c7cf2077e6afd3363562e8c89df569064ede0fa383826070df7e28b0fe94a1958d158164a8486a307d5c2b9a4d67d724ae1e89d3999f9a","file":"projects/ngx-contextmenu/src/lib/directives/context-menu-item/context-menu-item.directive.ts","type":"directive","description":"","rawdescription":"\\n","sourceCode":"import { Highlightable } from \'@angular/cdk/a11y\';\\nimport {\\n  Directive,\\n  EventEmitter,\\n  Input,\\n  Optional,\\n  Output,\\n  TemplateRef,\\n} from \'@angular/core\';\\nimport { ContextMenuComponent } from \'../../components/context-menu/context-menu.component\';\\nimport { evaluateIfFunction } from \'../../helper/evaluate\';\\n\\n@Directive({\\n  selector: \'[contextMenuItem]\',\\n})\\nexport class ContextMenuItemDirective<T> implements Highlightable {\\n  /**\\n   * Optional subMenu component ref\\n   */\\n  @Input()\\n  public subMenu?: ContextMenuComponent<T>;\\n\\n  /**\\n   * True to make this menu item a divider\\n   */\\n  @Input()\\n  public divider = false;\\n\\n  /**\\n   * Is this menu item disabled\\n   */\\n  @Input()\\n  public set disabled(disabled: boolean | ((value?: T) => boolean)) {\\n    this.#disabled = disabled;\\n  }\\n\\n  public get disabled(): boolean {\\n    return (\\n      this.passive ||\\n      this.divider ||\\n      evaluateIfFunction(this.#disabled, this.value)\\n    );\\n  }\\n\\n  /**\\n   * Is this menu item passive (for title)\\n   */\\n  @Input()\\n  public passive = false;\\n\\n  /**\\n   * Is this menu item visible\\n   */\\n  @Input()\\n  public visible: boolean | ((value?: T) => boolean) = true;\\n\\n  /**\\n   * Emits event and item\\n   */\\n  @Output()\\n  public execute: EventEmitter<{\\n    event: MouseEvent | KeyboardEvent;\\n    value?: T;\\n  }> = new EventEmitter();\\n\\n  /**\\n   * @internal\\n   */\\n  public value?: T;\\n\\n  /**\\n   * @internal\\n   */\\n  public isActive = false;\\n\\n  #disabled: boolean | ((value?: T) => boolean) = false;\\n\\n  constructor(\\n    @Optional()\\n    public template: TemplateRef<{ item: T }>\\n  ) {}\\n\\n  public setActiveStyles(): void {\\n    this.isActive = true;\\n  }\\n\\n  public setInactiveStyles(): void {\\n    this.isActive = false;\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public triggerExecute(event: MouseEvent | KeyboardEvent, value?: T): void {\\n    if (evaluateIfFunction(this.#disabled, value)) {\\n      return;\\n    }\\n\\n    this.execute.emit({ event, value });\\n  }\\n}\\n","selector":"[contextMenuItem]","providers":[],"inputsClass":[{"name":"disabled","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIs this menu item disabled\\n","description":"<p>Is this menu item disabled</p>\\n","line":33,"type":"boolean | ","decorators":[]},{"name":"divider","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTrue to make this menu item a divider\\n","description":"<p>True to make this menu item a divider</p>\\n","line":27,"type":"boolean","decorators":[]},{"name":"passive","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIs this menu item passive (for title)\\n","description":"<p>Is this menu item passive (for title)</p>\\n","line":49,"type":"boolean","decorators":[]},{"name":"subMenu","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional subMenu component ref\\n","description":"<p>Optional subMenu component ref</p>\\n","line":21,"type":"ContextMenuComponent<T>","decorators":[]},{"name":"visible","defaultValue":"true","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIs this menu item visible\\n","description":"<p>Is this menu item visible</p>\\n","line":55,"type":"boolean | ","decorators":[]}],"outputsClass":[{"name":"execute","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmits event and item\\n","description":"<p>Emits event and item</p>\\n","line":61,"type":"EventEmitter<literal type>"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"propertiesClass":[{"name":"#disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"boolean | ","optional":false,"description":"","line":76,"modifierKind":[121]},{"name":"isActive","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":74,"rawdescription":"\\n\\n","modifierKind":[123],"jsdoctags":[{"pos":1378,"end":1391,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1379,"end":1387,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]},{"name":"template","deprecated":false,"deprecationMessage":"","type":"TemplateRef<literal type>","optional":false,"description":"","line":80,"decorators":[{"name":"Optional","stringifiedArguments":""}],"modifierKind":[123]},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"","line":69,"rawdescription":"\\n\\n","modifierKind":[123],"jsdoctags":[{"pos":1330,"end":1343,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":1331,"end":1339,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]}],"methodsClass":[{"name":"setActiveStyles","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":83,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"setInactiveStyles","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":87,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"triggerExecute","args":[{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":""},{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"implements":["Highlightable"],"constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"template","type":"TemplateRef<literal type>","deprecated":false,"deprecationMessage":""}],"line":76,"jsdoctags":[{"name":"template","type":"TemplateRef<literal type>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"accessors":{"disabled":{"name":"disabled","setSignature":{"name":"disabled","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"disabled","type":"boolean | ","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":33,"rawdescription":"\\n\\nIs this menu item disabled\\n","description":"<p>Is this menu item disabled</p>\\n","jsdoctags":[{"name":"disabled","type":"boolean | ","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"getSignature":{"name":"disabled","type":"boolean","returnType":"boolean","line":37}}}}],"components":[{"name":"AppComponent","id":"component-AppComponent-ea50f99f751fed99fb015e818b7c67e390076c0a918439ff17b4c45a750dc0024bd4b27119954073b8dd7476633a71e663fee4ac6c214605fb5b128968b5e589","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ngx-context-menu-demo","styleUrls":[],"styles":["\\n      .dashboardContainer {\\n        width: 100%;\\n        height: 100%;\\n        position: fixed;\\n      }\\n\\n      .componentsContainer {\\n        position: fixed;\\n        bottom: 0;\\n        top: 100px;\\n        width: 100%;\\n      }\\n\\n      .componentContainer {\\n        overflow: auto;\\n        position: absolute;\\n      }\\n    "],"templateUrl":["./app.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"basicMenu","deprecated":false,"deprecationMessage":"","type":"ContextMenuComponent<any>","optional":true,"description":"","line":90,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'basicMenu\', {static: true}"}],"modifierKind":[123]},{"name":"disableBasicMenu","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":36,"modifierKind":[123]},{"name":"items","defaultValue":"[\\n    {\\n      name: \'John\',\\n      otherProperty: \'Foo\',\\n      layout: {\\n        height: \'90px\',\\n        left: \'0px\',\\n        top: \'0px\',\\n        width: \'98px\',\\n      },\\n      actions: [\\n        {\\n          enabled: true,\\n          execute: (item: any): void => console.log(item),\\n          html: (item: any): string => `John custom: ${item.name}`,\\n          visible: true,\\n        },\\n        {\\n          divider: true,\\n          visible: true,\\n        },\\n        {\\n          enabled: true,\\n          execute: (item: any): void => console.log(item),\\n          html: (item: any): string => `John custom: ${item.name}`,\\n          visible: true,\\n        },\\n      ],\\n    },\\n    /*    {\\n      name: \'Joe\',\\n      otherProperty: \'Bar\',\\n      layout: {\\n        height: \'90px\',\\n        left: \'98px\',\\n        top: \'0px\',\\n        width: \'98px\',\\n      },\\n      actions: [\\n        {\\n          enabled: true,\\n          execute: (item: any): void => {\\n            (<any>window).fake.doesntexist = 2;\\n          },\\n          html: (item: any): string => `Joe something: ${item.name}`,\\n          visible: true,\\n        },\\n      ],\\n    }, */\\n  ]","deprecated":false,"deprecationMessage":"","type":"any[]","optional":false,"description":"","line":37,"modifierKind":[123]},{"name":"outsideValue","defaultValue":"\'something\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":87,"modifierKind":[123]},{"name":"wrapper","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLDivElement>","optional":true,"description":"","line":34,"decorators":[{"name":"ViewChild","stringifiedArguments":"\'wrapper\'"}],"modifierKind":[121]}],"methodsClass":[{"name":"canUseFullScreen","args":[],"optional":false,"returnType":"boolean","typeParameters":[],"line":98,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"log","args":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":131,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onlyJoe","args":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":127,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onlyJohn","args":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":123,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"requestFullScreen","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","modifierKind":[123]},{"name":"showMessage","args":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":""},{"name":"data","type":"any","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":119,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"data","type":"any","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, ViewChild, ElementRef } from \'@angular/core\';\\nimport {\\n  ContextMenuService,\\n  ContextMenuComponent,\\n} from \'@perfectmemory/ngx-contextmenu\';\\n\\n@Component({\\n  selector: \'ngx-context-menu-demo\',\\n  styles: [\\n    `\\n      .dashboardContainer {\\n        width: 100%;\\n        height: 100%;\\n        position: fixed;\\n      }\\n\\n      .componentsContainer {\\n        position: fixed;\\n        bottom: 0;\\n        top: 100px;\\n        width: 100%;\\n      }\\n\\n      .componentContainer {\\n        overflow: auto;\\n        position: absolute;\\n      }\\n    `,\\n  ],\\n  templateUrl: \'./app.component.html\',\\n})\\nexport class AppComponent {\\n  @ViewChild(\'wrapper\')\\n  private wrapper?: ElementRef<HTMLDivElement>;\\n\\n  public disableBasicMenu = false;\\n  public items: any[] = [\\n    {\\n      name: \'John\',\\n      otherProperty: \'Foo\',\\n      layout: {\\n        height: \'90px\',\\n        left: \'0px\',\\n        top: \'0px\',\\n        width: \'98px\',\\n      },\\n      actions: [\\n        {\\n          enabled: true,\\n          execute: (item: any): void => console.log(item),\\n          html: (item: any): string => `John custom: ${item.name}`,\\n          visible: true,\\n        },\\n        {\\n          divider: true,\\n          visible: true,\\n        },\\n        {\\n          enabled: true,\\n          execute: (item: any): void => console.log(item),\\n          html: (item: any): string => `John custom: ${item.name}`,\\n          visible: true,\\n        },\\n      ],\\n    },\\n    /*    {\\n      name: \'Joe\',\\n      otherProperty: \'Bar\',\\n      layout: {\\n        height: \'90px\',\\n        left: \'98px\',\\n        top: \'0px\',\\n        width: \'98px\',\\n      },\\n      actions: [\\n        {\\n          enabled: true,\\n          execute: (item: any): void => {\\n            (<any>window).fake.doesntexist = 2;\\n          },\\n          html: (item: any): string => `Joe something: ${item.name}`,\\n          visible: true,\\n        },\\n      ],\\n    }, */\\n  ];\\n  public outsideValue = \'something\';\\n\\n  @ViewChild(\'basicMenu\', { static: true })\\n  public basicMenu?: ContextMenuComponent<any>;\\n  /*   @ViewChild(\'enableAndVisible\', { static: true })\\n  public enableAndVisible?: ContextMenuComponent;\\n  @ViewChild(\'withFunctions\', { static: true })\\n  public withFunctions?: ContextMenuComponent; */\\n\\n  constructor(private contextMenuService: ContextMenuService<any>) {}\\n\\n  public canUseFullScreen(): boolean {\\n    return !!this.wrapper?.nativeElement.requestFullscreen;\\n  }\\n\\n  public requestFullScreen(): void {\\n    if (this.canUseFullScreen()) {\\n      this.wrapper?.nativeElement.requestFullscreen();\\n    } else {\\n      console.log(\'cant use fullscreen\');\\n    }\\n  }\\n\\n  /*   public onContextMenu(event: MouseEvent, item: any): void {\\n    this.contextMenuService.display({\\n      kind: \'mouse\',\\n      event: event,\\n      item: item,\\n    });\\n    event.preventDefault();\\n  } */\\n\\n  public showMessage(message: any, data?: any): void {\\n    console.log(message, data);\\n  }\\n\\n  public onlyJohn(item: any): boolean {\\n    return item.name === \'John\';\\n  }\\n\\n  public onlyJoe(item: any): boolean {\\n    return item.name === \'Joe\';\\n  }\\n\\n  public log(message: any): void {\\n    console.log(message);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      .dashboardContainer {\\n        width: 100%;\\n        height: 100%;\\n        position: fixed;\\n      }\\n\\n      .componentsContainer {\\n        position: fixed;\\n        bottom: 0;\\n        top: 100px;\\n        width: 100%;\\n      }\\n\\n      .componentContainer {\\n        overflow: auto;\\n        position: absolute;\\n      }\\n    \\n","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"contextMenuService","type":"ContextMenuService<any>","deprecated":false,"deprecationMessage":""}],"line":90,"jsdoctags":[{"name":"contextMenuService","type":"ContextMenuService<any>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"templateData":"<h1>@perfectmemory/ngx-contextmenu</h1>\\n<button (click)=\\"requestFullScreen()\\">fullscreen</button>\\n<div\\n  (click)=\\"$event.preventDefault()\\"\\n  style=\\"margin: 20px; padding: 20px; background-color: white\\"\\n  #wrapper\\n>\\n  <div style=\\"position: relative\\">\\n    <div\\n      style=\\"margin: 20px; padding: 20px; transform: translate3d(0px, 0px, 0px)\\"\\n    >\\n      <div\\n        (click)=\\"$event.preventDefault()\\"\\n        style=\\"transform: translate3d(10px, -10px, 0px)\\"\\n      >\\n        <h3>Base Case</h3>\\n        <ul>\\n          <li\\n            *ngFor=\\"let item of items; let i = index\\"\\n            #ngxContextMenu=\\"ngxContextMenu\\"\\n            [contextMenu]=\\"basicMenu\\"\\n            [contextMenuValue]=\\"item\\"\\n            tabindex=\\"10\\"\\n            (click)=\\"log({$event, ngxContextMenu}); ngxContextMenu.open($event)\\"\\n            (keydown.shift.Y)=\\"ngxContextMenu.open()\\"\\n            (window:keydown.shift.Z)=\\"ngxContextMenu.close()\\"\\n          >\\n            Right Click ltr: {{ item }}\\n          </li>\\n        </ul>\\n        <ul dir=\\"rtl\\">\\n          <li\\n            *ngFor=\\"let item of items\\"\\n            [contextMenu]=\\"basicMenuRtl\\"\\n            [contextMenuValue]=\\"item\\"\\n            tabindex=\\"11\\"\\n            #ngxContextMenu2=\\"ngxContextMenu\\"\\n            (click)=\\"log({$event, ngxContextMenu2}); ngxContextMenu2.open($event)\\"\\n            (keydown.shift.Y)=\\"ngxContextMenu2.open()\\"\\n            (window:keydown.shift.Z)=\\"ngxContextMenu2.close()\\"\\n          >\\n            Right Click rtl: {{ item }}\\n          </li>\\n        </ul>\\n        <a href (click)=\\"disableBasicMenu = !disableBasicMenu\\"\\n          >{{ disableBasicMenu ? \'enable\' : \'disable\' }} basic menu</a\\n        >\\n        <h3>Static</h3>\\n        <ul>\\n          <li *ngFor=\\"let item of items\\" [contextMenu]=\\"static\\">\\n            Right Click: {{ item }}\\n          </li>\\n        </ul>\\n        <context-menu\\n          #static\\n          (close)=\\"showMessage(\'closed static\', $event)\\"\\n          (open)=\\"showMessage(\'open\', $event)\\"\\n        >\\n          <ng-template\\n            contextMenuItem\\n            [visible]=\\"true\\"\\n            [disabled]=\\"true\\"\\n            (execute)=\\"showMessage(\'Hi, someone\')\\"\\n          >\\n            Say hi\\n          </ng-template>\\n          <ng-template\\n            contextMenuItem\\n            [visible]=\\"false\\"\\n            (execute)=\\"showMessage(\'Hi, someone\')\\"\\n          >\\n            This will never show...\\n          </ng-template>\\n          <ng-template contextMenuItem [divider]=\\"true\\"></ng-template>\\n          <ng-template\\n            contextMenuItem\\n            [visible]=\\"true\\"\\n            [disabled]=\\"false\\"\\n            (execute)=\\"showMessage(\'Someone said: something\')\\"\\n          >\\n            Bye, someone\\n          </ng-template>\\n        </context-menu>\\n        <div\\n          style=\\"height: 100px; border: solid 1px #ccc; overflow: auto\\"\\n          cdkScrollable\\n        >\\n          <h3>Enabled and Visible</h3>\\n          <ul>\\n            <li\\n              *ngFor=\\"let item of items\\"\\n              [contextMenu]=\\"enableAndVisible\\"\\n              [contextMenuValue]=\\"item\\"\\n            >\\n              Right Click: {{ item }}\\n            </li>\\n          </ul>\\n          <context-menu\\n            #enableAndVisible\\n            (close)=\\"showMessage(\'closed enableAndVisible\', $event)\\"\\n          >\\n            <ng-template\\n              contextMenuItem\\n              let-item\\n              [visible]=\\"true\\"\\n              [disabled]=\\"true\\"\\n              (execute)=\\"showMessage(\'Hi, \' + $event)\\"\\n            >\\n              Say hi, {{ item }}! With access to the outside context:\\n              {{ outsideValue }}\\n            </ng-template>\\n            <ng-template\\n              contextMenuItem\\n              [visible]=\\"false\\"\\n              (execute)=\\"showMessage(\'Hi, \' + $event)\\"\\n            >\\n              This will never show...\\n            </ng-template>\\n            <ng-template contextMenuItem [divider]=\\"true\\"></ng-template>\\n            <ng-template\\n              contextMenuItem\\n              let-item\\n              [visible]=\\"true\\"\\n              [disabled]=\\"false\\"\\n              (execute)=\\"showMessage($event + \' said: \' + $event)\\"\\n            >\\n              Bye, {{ item }}\\n            </ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n            <ng-template contextMenuItem>Filler</ng-template>\\n          </context-menu>\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n          <br />\\n        </div>\\n        <h3>Enabled and Visible as Functions</h3>\\n        <ul>\\n          <li\\n            *ngFor=\\"let item of items\\"\\n            [contextMenu]=\\"withFunctions\\"\\n            [contextMenuValue]=\\"item\\"\\n          >\\n            Right Click: {{ item }}\\n          </li>\\n        </ul>\\n        <context-menu #withFunctions>\\n          <ng-template\\n            contextMenuItem\\n            [disabled]=\\"!onlyJohn\\"\\n            (execute)=\\"showMessage(\'Hi, \' + $event)\\"\\n          >\\n            Say hi! (enabled for John)\\n          </ng-template>\\n          <ng-template\\n            contextMenuItem\\n            [visible]=\\"onlyJoe\\"\\n            (execute)=\\"showMessage(\'Hi, \' + $event)\\"\\n          >\\n            Say hi! (visible for Joe)\\n          </ng-template>\\n          <ng-template\\n            contextMenuItem\\n            let-item\\n            (execute)=\\"showMessage($event + \' said: \' + $event)\\"\\n          >\\n            Bye, {{ item }}\\n          </ng-template>\\n        </context-menu>\\n        <br />\\n        <h3>Custom styling</h3>\\n        <ul>\\n          <li\\n            *ngFor=\\"let item of items\\"\\n            [contextMenu]=\\"customClassMenu\\"\\n            [contextMenuValue]=\\"item\\"\\n          >\\n            Right click to see styled menu\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\x3c!-- <div style=\\"position:fixed;top:35px;height:100%;width:100%;display:table; border-collapse: collapse;border:none;outline:none; pointer-events: none\\">\\n  <div style=\\"display: table-cell;width:200px;vertical-align: top\\">\\n    <div style=\\"position:absolute; top: 20px;\\">\\n      <div style=\\"position:fixed;top:200px;left:-200px\\"> --\x3e\\n<context-menu\\n  #basicMenu\\n  menuClass=\\"dark-theme\\"\\n  [disabled]=\\"disableBasicMenu\\"\\n  style=\\"pointer-events: all\\"\\n>\\n  <ng-template contextMenuItem [subMenu]=\\"saySubMenu\\" let-value>\\n    Say... {{ value.name  }}</ng-template\\n  >\\n  <context-menu #saySubMenu>\\n    <ng-template contextMenuItem [subMenu]=\\"sayHiSubMenu\\"> ...hi! </ng-template>\\n    <context-menu #sayHiSubMenu>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n        ...hi!\\n      </ng-template>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hola, \' + $event)\\">\\n        ...hola!\\n      </ng-template>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Salut, \' + $event)\\">\\n        ...salut!\\n      </ng-template>\\n    </context-menu>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Hola, \' + $event)\\">\\n      ...hola!\\n    </ng-template>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Salut, \' + $event)\\">\\n      ...salut!\\n    </ng-template>\\n  </context-menu>\\n  <ng-template contextMenuItem let-item [subMenu]=\\"byeSubMenu\\" let-value>\\n    Bye, {{ value.name }}\\n  </ng-template>\\n  <ng-template contextMenuItem let-item [divider]=\\"true\\"></ng-template>\\n  <context-menu #byeSubMenu>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Bye, \' + $event)\\">\\n      ...bye!\\n    </ng-template>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Ciao, \' + $event)\\">\\n      ...ciao!\\n    </ng-template>\\n    <ng-template\\n      contextMenuItem\\n      (execute)=\\"showMessage(\'Au revoir, \' + $event)\\"\\n    >\\n      ...au revoir!\\n    </ng-template>\\n  </context-menu>\\n  <ng-template\\n    contextMenuItem\\n    [disabled]=\\"true\\"\\n    (execute)=\\"showMessage(\'Simple\')\\"\\n  >\\n    I am disabled\\n  </ng-template>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Simple\')\\">\\n    very long text to check if if fills into the space it has\\n  </ng-template>\\n  <ng-template contextMenuItem [passive]=\\"true\\">\\n    Input something:\\n    <input type=\\"text\\" />\\n  </ng-template>\\n</context-menu>\\n\\n<context-menu\\n  #basicMenuRtl\\n  dir=\\"rtl\\"\\n  [disabled]=\\"disableBasicMenu\\"\\n  style=\\"pointer-events: all\\"\\n>\\n  <ng-template contextMenuItem [subMenu]=\\"saySubMenu\\"> Say... </ng-template>\\n  <context-menu #saySubMenu>\\n    <ng-template contextMenuItem [subMenu]=\\"sayHiSubMenu\\"> ...hi! </ng-template>\\n    <context-menu #sayHiSubMenu>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n        ...hi!\\n      </ng-template>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hola, \' + $event)\\">\\n        ...hola!\\n      </ng-template>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Salut, \' + $event)\\">\\n        ...salut!\\n      </ng-template>\\n    </context-menu>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Hola, \' + $event)\\">\\n      ...hola!\\n    </ng-template>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Salut, \' + $event)\\">\\n      ...salut!\\n    </ng-template>\\n  </context-menu>\\n  <ng-template contextMenuItem let-item [subMenu]=\\"byeSubMenu\\">\\n    Bye, {{ item }}\\n  </ng-template>\\n  <ng-template contextMenuItem let-item [divider]=\\"true\\"></ng-template>\\n  <context-menu #byeSubMenu>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Bye, \' + $event)\\">\\n      ...bye!\\n    </ng-template>\\n    <ng-template contextMenuItem (execute)=\\"showMessage(\'Ciao, \' + $event)\\">\\n      ...ciao!\\n    </ng-template>\\n    <ng-template\\n      contextMenuItem\\n      (execute)=\\"showMessage(\'Au revoir, \' + $event)\\"\\n    >\\n      ...au revoir!\\n    </ng-template>\\n  </context-menu>\\n  <ng-template\\n    contextMenuItem\\n    [disabled]=\\"true\\"\\n    (execute)=\\"showMessage(\'Simple\')\\"\\n  >\\n    I am disabled\\n  </ng-template>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Simple\')\\">\\n    very long text to check if if fills into the space it has\\n  </ng-template>\\n  <ng-template contextMenuItem [passive]=\\"true\\">\\n    Input something:\\n    <input type=\\"text\\" />\\n  </ng-template>\\n</context-menu>\\n\\n<context-menu\\n  #customClassMenu\\n  [menuClass]=\\"\'mystyle\'\\"\\n  style=\\"pointer-events: all\\"\\n>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Styled menu1\')\\">\\n    This menu is styled\\n  </ng-template>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Styled menu2\')\\">\\n    with a custom class\\n  </ng-template>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Styled menu3\')\\">\\n    that needs to be global\\n  </ng-template>\\n</context-menu>\\n\\n<div class=\\"dashboardContainer\\" style=\\"pointer-events: none\\">\\n  <div class=\\"componentsContainer\\">\\n    <div\\n      class=\\"componentContainer\\"\\n      *ngFor=\\"let item of items\\"\\n      style=\\"pointer-events: all\\"\\n      [ngStyle]=\\"item.layout\\"\\n      [contextMenu]=\\"componentMenu\\"\\n      [contextMenuValue]=\\"item\\"\\n    >\\n      {{ item.name }}\\n    </div>\\n    <context-menu #componentMenu>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n        Say hi!\\n      </ng-template>\\n      <ng-template\\n        contextMenuItem\\n        let-item\\n        (execute)=\\"showMessage($event.event)\\"\\n      >\\n        Bye, {{ item }}\\n      </ng-template>\\n    </context-menu>\\n  </div>\\n</div>\\n<ul>\\n  <li\\n    *ngFor=\\"let item of items\\"\\n    [contextMenu]=\\"itemContextMenu\\"\\n    [contextMenuValue]=\\"item\\"\\n  >\\n    {{ item.name }}\\n    <context-menu #itemContextMenu>\\n      <ng-template\\n        *ngFor=\\"let action of item.actions\\"\\n        contextMenuItem\\n        let-item\\n        [visible]=\\"action.visible\\"\\n        [disabled]=\\"action.enabled\\"\\n        [divider]=\\"action.divider\\"\\n        (execute)=\\"action.execute($event)\\"\\n      >\\n        {{ action.html(item) }}\\n      </ng-template>\\n      <ng-template contextMenuItem [subMenu]=\\"someSubMenu\\">\\n        Submenu\\n      </ng-template>\\n      <context-menu #someSubMenu>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n        <ng-template contextMenuItem>Filler</ng-template>\\n      </context-menu>\\n    </context-menu>\\n  </li>\\n</ul>\\n<router-outlet></router-outlet>\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n<br />\\n"},{"name":"ChildOneComponent","id":"component-ChildOneComponent-bff7262f4a6d3d402dfc49c749c4f25044c2f45c9a63ca907d6ecffe001d76fe885a7bf237fa0bd6a92a0a49840eab68cf3775a26c49553022d44057d0fd2df5","file":"src/app/components/child1.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"child-one","styleUrls":[],"styles":[],"template":"<h3>Routing One</h3>\\n<ul>\\n  <li\\n    *ngFor=\\"let item of items\\"\\n    [contextMenu]=\\"routingMenu\\"\\n    [contextMenuValue]=\\"item\\"\\n  >\\n    Right Click: {{ item?.name }}\\n  </li>\\n</ul>\\n<context-menu #routingMenu>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n    Go!\\n  </ng-template>\\n</context-menu>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"items","defaultValue":"[\\n    {\\n      name: \'One\',\\n      url: \'/one\',\\n    },\\n    {\\n      name: \'Two\',\\n      url: \'/two\',\\n    },\\n  ]","deprecated":false,"deprecationMessage":"","type":"any[]","optional":false,"description":"","line":25,"modifierKind":[123]}],"methodsClass":[{"name":"go","args":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"showMessage","args":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Router } from \'@angular/router\';\\nimport { Component, OnInit } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'child-one\',\\n  template: `\\n    <h3>Routing One</h3>\\n    <ul>\\n      <li\\n        *ngFor=\\"let item of items\\"\\n        [contextMenu]=\\"routingMenu\\"\\n        [contextMenuValue]=\\"item\\"\\n      >\\n        Right Click: {{ item?.name }}\\n      </li>\\n    </ul>\\n    <context-menu #routingMenu>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n        Go!\\n      </ng-template>\\n    </context-menu>\\n  `,\\n})\\nexport class ChildOneComponent {\\n  public items: any[] = [\\n    {\\n      name: \'One\',\\n      url: \'/one\',\\n    },\\n    {\\n      name: \'Two\',\\n      url: \'/two\',\\n    },\\n  ];\\n\\n  constructor(private router: Router) {}\\n\\n  public showMessage(message: any) {\\n    console.log(message);\\n  }\\n\\n  public go(item: any) {\\n    this.router.navigateByUrl(item.url);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"router","type":"Router","deprecated":false,"deprecationMessage":""}],"line":34,"jsdoctags":[{"name":"router","type":"Router","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"ChildTwoComponent","id":"component-ChildTwoComponent-c4436bfcf99a69083c490b321556c46d6a5735691a79c74c7dc580484bc54658e32a30eb176faffc8fc9d2d54b3c303a53fe6e13c23f9f8fb786ed8d4e9cb6a3","file":"src/app/components/child2.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"child-two","styleUrls":[],"styles":[],"template":"<h3>Routing Two</h3>\\n<ul>\\n  <li\\n    *ngFor=\\"let item of items\\"\\n    [contextMenu]=\\"routingMenu\\"\\n    [contextMenuValue]=\\"item\\"\\n  >\\n    Right Click: {{ item?.name }}\\n  </li>\\n</ul>\\n<context-menu #routingMenu>\\n  <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n    Go!\\n  </ng-template>\\n</context-menu>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"items","defaultValue":"[\\n    {\\n      name: \'One\',\\n      url: \'/one\',\\n    },\\n    {\\n      name: \'Two\',\\n      url: \'/two\',\\n    },\\n  ]","deprecated":false,"deprecationMessage":"","type":"[]","optional":false,"description":"","line":25,"modifierKind":[123]}],"methodsClass":[{"name":"go","args":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":42,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"item","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"showMessage","args":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","modifierKind":[123],"jsdoctags":[{"name":"message","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport { Router } from \'@angular/router\';\\n\\n@Component({\\n  selector: \'child-two\',\\n  template: `\\n    <h3>Routing Two</h3>\\n    <ul>\\n      <li\\n        *ngFor=\\"let item of items\\"\\n        [contextMenu]=\\"routingMenu\\"\\n        [contextMenuValue]=\\"item\\"\\n      >\\n        Right Click: {{ item?.name }}\\n      </li>\\n    </ul>\\n    <context-menu #routingMenu>\\n      <ng-template contextMenuItem (execute)=\\"showMessage(\'Hi, \' + $event)\\">\\n        Go!\\n      </ng-template>\\n    </context-menu>\\n  `,\\n})\\nexport class ChildTwoComponent {\\n  public items = [\\n    {\\n      name: \'One\',\\n      url: \'/one\',\\n    },\\n    {\\n      name: \'Two\',\\n      url: \'/two\',\\n    },\\n  ];\\n\\n  constructor(private router: Router) {}\\n\\n  public showMessage(message: any) {\\n    console.log(message);\\n  }\\n\\n  public go(item: any) {\\n    this.router.navigateByUrl(item.url);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"router","type":"Router","deprecated":false,"deprecationMessage":""}],"line":34,"jsdoctags":[{"name":"router","type":"Router","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"ContextMenuComponent","id":"component-ContextMenuComponent-7957d2e20c253635ec062d96eea4dd807730eca134478885e174e324bd3f1684201cf0f759bcab9dd0f4a2bccb6d6a2198a562ae118d79f180b44cdc1e851245","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.ts","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"context-menu","styleUrls":[],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"dir","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWhether the menu is oriented to the right (default: `ltr`) or to the right (`rtl`)\\n","description":"<p>Whether the menu is oriented to the right (default: <code>ltr</code>) or to the right (<code>rtl</code>)</p>\\n","line":56,"type":"\\"ltr\\" | \\"rtl\\" | undefined","decorators":[]},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nDisable the whole context menu\\n","description":"<p>Disable the whole context menu</p>\\n","line":50,"type":"boolean","decorators":[]},{"name":"menuClass","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nA CSS class to apply to the context menu overlay, ideal for theming and custom styling\\n","description":"<p>A CSS class to apply to the context menu overlay, ideal for theming and custom styling</p>\\n","line":44,"type":"string","decorators":[]}],"outputsClass":[{"name":"close","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when the menu is closed\\n","description":"<p>Emit when the menu is closed</p>\\n","line":68,"type":"EventEmitter<void>"},{"name":"open","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when the menu is opened\\n","description":"<p>Emit when the menu is opened</p>\\n","line":62,"type":"EventEmitter<ContextMenuOpenEvent<T>>"}],"propertiesClass":[{"name":"menuItems","deprecated":false,"deprecationMessage":"","type":"QueryList<ContextMenuItemDirective<T>>","optional":false,"description":"<p>The menu item directives defined inside the component</p>\\n","line":74,"rawdescription":"\\n\\nThe menu item directives defined inside the component\\n","decorators":[{"name":"ContentChildren","stringifiedArguments":"ContextMenuItemDirective"}],"modifierKind":[123]},{"name":"subscription","defaultValue":"new Subscription()","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":false,"description":"","line":85,"modifierKind":[121]},{"name":"value","deprecated":false,"deprecationMessage":"","type":"T","optional":true,"description":"","line":83,"rawdescription":"\\n\\n","modifierKind":[123],"jsdoctags":[{"pos":2133,"end":2146,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2134,"end":2142,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]},{"name":"visibleMenuItems","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"ContextMenuItemDirective<T>[]","optional":false,"description":"","line":79,"rawdescription":"\\n\\n","modifierKind":[123],"jsdoctags":[{"pos":2043,"end":2056,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2044,"end":2052,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]}],"methodsClass":[{"name":"attachContextMenu","args":[{"name":"overlayRef","type":"OverlayRef","deprecated":false,"deprecationMessage":""},{"name":"context","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":170,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"overlayRef","type":"OverlayRef","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"context","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"closeAllContextMenus","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":254,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"destroyLeafMenu","args":[{"name":"excludeRootMenu","type":"boolean","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":258,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"excludeRootMenu","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getDir","args":[{"name":"event","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"\\"ltr\\" | \\"rtl\\" | undefined","typeParameters":[],"line":246,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getMenuClass","args":[{"name":"event","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":238,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isMenuItemVisible","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":262,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":110,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":97,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"onMenuEvent","args":[{"name":"event","type":"ContextMenuOpenEvent<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":146,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"ContextMenuOpenEvent<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"openContextMenu","args":[{"name":"context","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":117,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOpen context menu\\n","description":"<p>Open context menu</p>\\n","modifierKind":[123],"jsdoctags":[{"name":"context","type":"IContextMenuContext<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setVisibleMenuItems","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":266,"deprecated":false,"deprecationMessage":"","modifierKind":[121]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\n  FlexibleConnectedPositionStrategy,\\n  Overlay,\\n  OverlayRef,\\n  ScrollStrategyOptions,\\n} from \'@angular/cdk/overlay\';\\nimport { ComponentPortal } from \'@angular/cdk/portal\';\\nimport {\\n  Component,\\n  ContentChildren,\\n  ElementRef,\\n  EventEmitter,\\n  Input,\\n  OnDestroy,\\n  Output,\\n  QueryList,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { Subscription } from \'rxjs\';\\nimport { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { evaluateIfFunction } from \'../../helper/evaluate\';\\nimport { ContextMenuEventService } from \'../../services/context-menu-event/context-menu-event.service\';\\nimport { ContextMenuStackService } from \'../../services/context-menu-stack/context-menu-stack.service\';\\nimport { ContextMenuContentComponent } from \'../context-menu-content/context-menu-content.component\';\\nimport {\\n  getPositionsToAnchorElement,\\n  getPositionsToXY,\\n} from \'./context-menu.component.helpers\';\\nimport {\\n  ContextMenuOpenEvent,\\n  IContextMenuContext,\\n} from \'./context-menu.component.interface\';\\n\\n@Component({\\n  encapsulation: ViewEncapsulation.None,\\n  selector: \'context-menu\',\\n  template: \'\',\\n})\\nexport class ContextMenuComponent<T> implements OnDestroy {\\n  /**\\n   * A CSS class to apply to the context menu overlay, ideal for theming and custom styling\\n   */\\n  @Input()\\n  public menuClass = \'\';\\n\\n  /**\\n   * Disable the whole context menu\\n   */\\n  @Input()\\n  public disabled = false;\\n\\n  /**\\n   * Whether the menu is oriented to the right (default: `ltr`) or to the right (`rtl`)\\n   */\\n  @Input()\\n  public dir: \'ltr\' | \'rtl\' | undefined;\\n\\n  /**\\n   * Emit when the menu is opened\\n   */\\n  @Output()\\n  public open: EventEmitter<ContextMenuOpenEvent<T>> = new EventEmitter();\\n\\n  /**\\n   * Emit when the menu is closed\\n   */\\n  @Output()\\n  public close: EventEmitter<void> = new EventEmitter();\\n\\n  /**\\n   * The menu item directives defined inside the component\\n   */\\n  @ContentChildren(ContextMenuItemDirective)\\n  public menuItems!: QueryList<ContextMenuItemDirective<T>>;\\n\\n  /**\\n   * @internal\\n   */\\n  public visibleMenuItems: ContextMenuItemDirective<T>[] = [];\\n  /**\\n   * @internal\\n   */\\n  public value?: T;\\n\\n  private subscription: Subscription = new Subscription();\\n\\n  constructor(\\n    private overlay: Overlay,\\n    private scrollStrategy: ScrollStrategyOptions,\\n    private contextMenuStack: ContextMenuStackService<T>,\\n    private contextMenuEventService: ContextMenuEventService<T>\\n  ) {}\\n\\n  /**\\n   * @internal\\n   */\\n  public ngOnInit(): void {\\n    const subscription = this.contextMenuEventService.onShow.subscribe(\\n      (menuEvent) => {\\n        this.onMenuEvent(menuEvent);\\n      }\\n    );\\n\\n    this.subscription.add(subscription);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public ngOnDestroy(): void {\\n    this.subscription.unsubscribe();\\n  }\\n\\n  /**\\n   * Open context menu\\n   */\\n  public openContextMenu(context: IContextMenuContext<T>) {\\n    let positionStrategy: FlexibleConnectedPositionStrategy;\\n\\n    if (context.anchoredTo === \'position\') {\\n      positionStrategy = this.overlay\\n        .position()\\n        .flexibleConnectedTo({\\n          x: context.x,\\n          y: context.y,\\n        })\\n        .withPositions(getPositionsToXY(context.dir));\\n      this.closeAllContextMenus();\\n    } else {\\n      const { anchorElement, parentContextMenu } = context;\\n      positionStrategy = this.overlay\\n        .position()\\n        .flexibleConnectedTo(new ElementRef(anchorElement))\\n        .withPositions(getPositionsToAnchorElement(parentContextMenu.dir));\\n      this.contextMenuStack.destroySubMenus(parentContextMenu);\\n    }\\n\\n    const overlayRef = this.overlay.create({\\n      positionStrategy,\\n      panelClass: \'ngx-contextmenu\',\\n      scrollStrategy: this.scrollStrategy.close(),\\n    });\\n    this.attachContextMenu(overlayRef, context);\\n  }\\n\\n  private onMenuEvent(event: ContextMenuOpenEvent<T>): void {\\n    if (this.disabled) {\\n      return;\\n    }\\n\\n    const { contextMenu, value } = event;\\n\\n    if (contextMenu && contextMenu !== this) {\\n      return;\\n    }\\n\\n    this.value = value;\\n    this.setVisibleMenuItems();\\n\\n    this.openContextMenu({\\n      ...event,\\n      menuItemDirectives: this.visibleMenuItems,\\n      menuClass: this.menuClass,\\n      dir: this.dir,\\n    });\\n\\n    this.open.next(event);\\n  }\\n\\n  private attachContextMenu(\\n    overlayRef: OverlayRef,\\n    context: IContextMenuContext<T>\\n  ): void {\\n    const { value, menuItemDirectives } = context;\\n    const contextMenuContentRef = overlayRef.attach(\\n      new ComponentPortal<ContextMenuContentComponent<T>>(\\n        ContextMenuContentComponent\\n      )\\n    );\\n\\n    const { instance: contextMenuContentComponent } = contextMenuContentRef;\\n\\n    contextMenuContentComponent.value = value;\\n    contextMenuContentComponent.menuDirectives = menuItemDirectives;\\n    contextMenuContentComponent.overlayRef = overlayRef;\\n    contextMenuContentComponent.isLeaf = true;\\n    contextMenuContentComponent.menuClass = this.getMenuClass(context);\\n    contextMenuContentComponent.dir = this.getDir(context);\\n\\n    this.contextMenuStack.push({\\n      overlayRef,\\n      contextMenuContentComponent,\\n    });\\n\\n    const subscriptions: Subscription = new Subscription();\\n    subscriptions.add(\\n      contextMenuContentComponent.execute.subscribe(() =>\\n        this.closeAllContextMenus()\\n      )\\n    );\\n    subscriptions.add(\\n      contextMenuContentComponent.closeAllMenus.subscribe(() =>\\n        this.closeAllContextMenus()\\n      )\\n    );\\n    subscriptions.add(\\n      contextMenuContentComponent.closeLeafMenu.subscribe(\\n        (closeLeafMenuEvent) =>\\n          this.destroyLeafMenu(!!closeLeafMenuEvent.excludeRootMenu)\\n      )\\n    );\\n    subscriptions.add(\\n      contextMenuContentComponent.openSubMenu.subscribe(\\n        (openSubMenuEvent: ContextMenuOpenEvent<T>) => {\\n          this.contextMenuStack.destroySubMenus(contextMenuContentComponent);\\n          if (!openSubMenuEvent.contextMenu) {\\n            contextMenuContentComponent.isLeaf = true;\\n            return;\\n          }\\n          contextMenuContentComponent.isLeaf = false;\\n          this.contextMenuEventService.show(openSubMenuEvent);\\n        }\\n      )\\n    );\\n    subscriptions.add(\\n      contextMenuContentComponent.closeSubMenus.subscribe(() => {\\n        this.contextMenuStack.destroySubMenus(contextMenuContentComponent);\\n      })\\n    );\\n    contextMenuContentRef.onDestroy(() => {\\n      this.close.next();\\n      menuItemDirectives.forEach((menuItem) => (menuItem.isActive = false));\\n      subscriptions.unsubscribe();\\n    });\\n    contextMenuContentRef.changeDetectorRef.detectChanges();\\n  }\\n\\n  private getMenuClass(event: IContextMenuContext<T>): string {\\n    return (\\n      event.menuClass ||\\n      (event.anchoredTo === \'element\' && event?.parentContextMenu?.menuClass) ||\\n      \'\'\\n    );\\n  }\\n\\n  private getDir(event: IContextMenuContext<T>): \'ltr\' | \'rtl\' | undefined {\\n    return (\\n      event.dir ||\\n      (event.anchoredTo === \'element\' && event?.parentContextMenu?.dir) ||\\n      undefined\\n    );\\n  }\\n\\n  private closeAllContextMenus(): void {\\n    this.contextMenuStack.closeAll();\\n  }\\n\\n  private destroyLeafMenu(excludeRootMenu: boolean): void {\\n    this.contextMenuStack.closeLeafMenu(excludeRootMenu);\\n  }\\n\\n  private isMenuItemVisible(menuItem: ContextMenuItemDirective<T>): boolean {\\n    return evaluateIfFunction(menuItem.visible, this.value);\\n  }\\n\\n  private setVisibleMenuItems(): void {\\n    this.visibleMenuItems = this.menuItems.filter((menuItem) =>\\n      this.isMenuItemVisible(menuItem)\\n    );\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"overlay","type":"Overlay","deprecated":false,"deprecationMessage":""},{"name":"scrollStrategy","type":"ScrollStrategyOptions","deprecated":false,"deprecationMessage":""},{"name":"contextMenuStack","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":""},{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":""}],"line":85,"jsdoctags":[{"name":"overlay","type":"Overlay","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"scrollStrategy","type":"ScrollStrategyOptions","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextMenuStack","type":"ContextMenuStackService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"contextMenuEventService","type":"ContextMenuEventService<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"implements":["OnDestroy"]},{"name":"ContextMenuContentComponent","id":"component-ContextMenuContentComponent-856ca153908c75472be42a94517afddee97d406c4c759729f90a34d468f600f906c249a5d72013c4bdd46d1253ebd3641eadf695124f18267256c0496a9e9a9a","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"context-menu-content","styleUrls":[],"styles":[],"templateUrl":["./context-menu-content.component.html"],"viewProviders":[],"inputsClass":[{"name":"dir","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":1370,"end":1447,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":344,"tagName":{"pos":1371,"end":1374,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"see"},"comment":"<p>://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir</p>\\n","name":{"pos":1375,"end":1380,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":308,"name":{"pos":1375,"end":1380,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"https"}}}],"rawdescription":"\\n\\nThe orientation of the component\\nSee https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir\\n","description":"<p>The orientation of the component\\nSee <a href=\\"https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir\\">https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir</a></p>\\n","line":62,"type":"\\"ltr\\" | \\"rtl\\" | undefined","decorators":[]},{"name":"isLeaf","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWether the instance is a leaf menu or not\\n","description":"<p>Wether the instance is a leaf menu or not</p>\\n","line":86,"type":"boolean","decorators":[]},{"name":"menuClass","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nA CSS class to apply a theme to the the menu\\n","description":"<p>A CSS class to apply a theme to the the menu</p>\\n","line":74,"type":"string","decorators":[]},{"name":"menuDirectives","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe list of `ContextMenuItemDirective` that represent each menu items\\n","description":"<p>The list of <code>ContextMenuItemDirective</code> that represent each menu items</p>\\n","line":48,"type":"ContextMenuItemDirective<T>[]","decorators":[]},{"name":"overlayRef","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe overlay ref associated to the instance\\n","description":"<p>The overlay ref associated to the instance</p>\\n","line":80,"type":"OverlayRef | undefined","decorators":[]},{"name":"parentContextMenu","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe parent menu of the instance\\n","description":"<p>The parent menu of the instance</p>\\n","line":68,"type":"ContextMenuContentComponent<T>","decorators":[]},{"name":"value","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe item on which the menu act\\n","description":"<p>The item on which the menu act</p>\\n","line":54,"type":"T","decorators":[]}],"outputsClass":[{"name":"closeAllMenus","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when all menus is closed\\n","description":"<p>Emit when all menus is closed</p>\\n","line":121,"type":"EventEmitter<literal type>"},{"name":"closeLeafMenu","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when a leaf menu is closed\\n","description":"<p>Emit when a leaf menu is closed</p>\\n","line":109,"type":"EventEmitter<ContextMenuCloseLeafEvent>"},{"name":"closeSubMenus","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when sub menus are closed\\n","description":"<p>Emit when sub menus are closed</p>\\n","line":115,"type":"EventEmitter<void>"},{"name":"execute","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when a menu item is selected\\n","description":"<p>Emit when a menu item is selected</p>\\n","line":92,"type":"EventEmitter<literal type>"},{"name":"openSubMenu","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nEmit when a sub menu is opened\\n","description":"<p>Emit when a sub menu is opened</p>\\n","line":102,"type":"EventEmitter<ContextMenuOpenEvent<T>>"}],"propertiesClass":[{"name":"_elementRef","deprecated":false,"deprecationMessage":"","type":"ElementRef<HTMLElement>","optional":false,"description":"","line":135,"modifierKind":[123]},{"name":"keyManager","deprecated":false,"deprecationMessage":"","type":"ActiveDescendantKeyManager<ContextMenuItemDirective<T>>","optional":false,"description":"","line":131,"modifierKind":[121]},{"name":"liElementRefs","deprecated":false,"deprecationMessage":"","type":"QueryList<ElementRef>","optional":false,"description":"","line":129,"rawdescription":"\\n\\n","decorators":[{"name":"ViewChildren","stringifiedArguments":"\'li\'"}],"modifierKind":[123],"jsdoctags":[{"pos":2779,"end":2792,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":2780,"end":2788,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]},{"name":"subscription","defaultValue":"new Subscription()","deprecated":false,"deprecationMessage":"","type":"Subscription","optional":false,"description":"","line":132,"modifierKind":[121]}],"methodsClass":[{"name":"cancelEvent","args":[{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":383,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]},{"name":"closeActiveItemSubMenu","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":367,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isMenuItemDisabled","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":261,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"isMenuItemVisible","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":268,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"ngAfterViewInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":147,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"ngOnDestroy","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":154,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"ngOnInit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":140,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"onClickOrRightClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":239,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'document:click\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'document:contextmenu\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyArrowDownOrUp","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:keydown.ArrowDown\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'window:keydown.ArrowUp\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyArrowEscape","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":226,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:keydown.Escape\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyArrowLeft","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":192,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:keydown.ArrowLeft\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyArrowRight","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":175,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:keydown.ArrowRight\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onKeyEnterOrSpace","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":210,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","decorators":[{"name":"HostListener","stringifiedArguments":"\'window:keydown.Enter\', [\'$event\']"},{"name":"HostListener","stringifiedArguments":"\'window:keydown.Space\', [\'$event\']"}],"modifierKind":[123],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onMenuItemSelect","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":321,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"onOpenSubMenu","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":275,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"openActiveItemSubMenu","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":355,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setupDirectives","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":339,"deprecated":false,"deprecationMessage":"","modifierKind":[121]},{"name":"stopEvent","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":254,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"triggerExecute","args":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":""},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":332,"deprecated":false,"deprecationMessage":"","modifierKind":[121],"jsdoctags":[{"name":"menuItem","type":"ContextMenuItemDirective<T>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"event","type":"MouseEvent | KeyboardEvent","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"document:click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4970,"end":4983,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4971,"end":4979,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":239},{"name":"document:contextmenu","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4970,"end":4983,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4971,"end":4979,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":239},{"name":"window:keydown.ArrowDown","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":3461,"end":3474,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3462,"end":3470,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":163},{"name":"window:keydown.ArrowLeft","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4065,"end":4078,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4066,"end":4074,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":192},{"name":"window:keydown.ArrowRight","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":3744,"end":3757,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3745,"end":3753,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":175},{"name":"window:keydown.ArrowUp","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":3461,"end":3474,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":3462,"end":3470,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":163},{"name":"window:keydown.Enter","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4384,"end":4397,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4385,"end":4393,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":210},{"name":"window:keydown.Escape","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4744,"end":4757,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4745,"end":4753,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":226},{"name":"window:keydown.Space","args":[{"name":"event","type":"KeyboardEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","jsdoctags":[{"pos":4384,"end":4397,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":4385,"end":4393,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}],"line":210}],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { ActiveDescendantKeyManager } from \'@angular/cdk/a11y\';\\nimport { OverlayRef } from \'@angular/cdk/overlay\';\\nimport {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ElementRef,\\n  EventEmitter,\\n  HostBinding,\\n  HostListener,\\n  Input,\\n  OnDestroy,\\n  OnInit,\\n  Output,\\n  QueryList,\\n  ViewChildren,\\n} from \'@angular/core\';\\nimport { Subscription } from \'rxjs\';\\nimport { ContextMenuItemDirective } from \'../../directives/context-menu-item/context-menu-item.directive\';\\nimport { evaluateIfFunction } from \'../../helper/evaluate\';\\nimport {\\n  ContextMenuCloseLeafEvent,\\n  ContextMenuOpenEvent,\\n} from \'../context-menu/context-menu.component.interface\';\\n\\nconst ARROW_LEFT_KEYCODE = 37;\\nconst ARROW_RIGHT_KEYCODE = 39;\\n\\n/**\\n * For testing purpose only\\n */\\nexport const TESTING_WRAPPER = {\\n  ActiveDescendantKeyManager,\\n};\\n\\n@Component({\\n  selector: \'context-menu-content\',\\n  templateUrl: \'./context-menu-content.component.html\',\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContextMenuContentComponent<T>\\n  implements OnInit, OnDestroy, AfterViewInit\\n{\\n  /**\\n   * The list of `ContextMenuItemDirective` that represent each menu items\\n   */\\n  @Input()\\n  public menuDirectives: ContextMenuItemDirective<T>[] = [];\\n\\n  /**\\n   * The item on which the menu act\\n   */\\n  @Input()\\n  public value?: T;\\n\\n  /**\\n   * The orientation of the component\\n   * @see https://developer.mozilla.org/fr/docs/Web/HTML/Global_attributes/dir\\n   */\\n  @Input()\\n  @HostBinding(\'attr.dir\')\\n  public dir: \'ltr\' | \'rtl\' | undefined;\\n\\n  /**\\n   * The parent menu of the instance\\n   */\\n  @Input()\\n  public parentContextMenu!: ContextMenuContentComponent<T>;\\n\\n  /**\\n   * A CSS class to apply a theme to the the menu\\n   */\\n  @Input()\\n  public menuClass: string = \'\';\\n\\n  /**\\n   * The overlay ref associated to the instance\\n   */\\n  @Input()\\n  public overlayRef: OverlayRef | undefined;\\n\\n  /**\\n   * Wether the instance is a leaf menu or not\\n   */\\n  @Input()\\n  public isLeaf = false;\\n\\n  /**\\n   * Emit when a menu item is selected\\n   */\\n  @Output()\\n  public execute: EventEmitter<{\\n    event: MouseEvent | KeyboardEvent;\\n    value?: T;\\n    menuDirective: ContextMenuItemDirective<T>;\\n  }> = new EventEmitter();\\n\\n  /**\\n   * Emit when a sub menu is opened\\n   */\\n  @Output()\\n  public openSubMenu: EventEmitter<ContextMenuOpenEvent<T>> =\\n    new EventEmitter();\\n\\n  /**\\n   * Emit when a leaf menu is closed\\n   */\\n  @Output()\\n  public closeLeafMenu: EventEmitter<ContextMenuCloseLeafEvent> = new EventEmitter();\\n\\n  /**\\n   * Emit when sub menus are closed\\n   */\\n  @Output()\\n  public closeSubMenus: EventEmitter<void> = new EventEmitter();\\n\\n  /**\\n   * Emit when all menus is closed\\n   */\\n  @Output()\\n  public closeAllMenus: EventEmitter<{\\n    event: MouseEvent;\\n  }> = new EventEmitter();\\n\\n  /**\\n   * @internal\\n   */\\n  @ViewChildren(\'li\')\\n  public liElementRefs!: QueryList<ElementRef>;\\n\\n  private keyManager!: ActiveDescendantKeyManager<ContextMenuItemDirective<T>>;\\n  private subscription: Subscription = new Subscription();\\n\\n  // TODO: should be private but issue in spec with NullInjectorError: No provider for ElementRef!\\n  constructor(public _elementRef: ElementRef<HTMLElement>) {}\\n\\n  /**\\n   * @internal\\n   */\\n  public ngOnInit(): void {\\n    this.setupDirectives();\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public ngAfterViewInit() {\\n    this.overlayRef?.updatePosition();\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public ngOnDestroy() {\\n    this.subscription.unsubscribe();\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'window:keydown.ArrowDown\', [\'$event\'])\\n  @HostListener(\'window:keydown.ArrowUp\', [\'$event\'])\\n  public onKeyArrowDownOrUp(event: KeyboardEvent): void {\\n    if (!this.isLeaf) {\\n      return;\\n    }\\n\\n    this.keyManager.onKeydown(event);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'window:keydown.ArrowRight\', [\'$event\'])\\n  public onKeyArrowRight(event: KeyboardEvent): void {\\n    if (!this.isLeaf) {\\n      return;\\n    }\\n\\n    if (this.dir === \'rtl\') {\\n      this.closeActiveItemSubMenu(event);\\n      return;\\n    }\\n\\n    this.openActiveItemSubMenu(event);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'window:keydown.ArrowLeft\', [\'$event\'])\\n  public onKeyArrowLeft(event: KeyboardEvent): void {\\n    if (!this.isLeaf) {\\n      return;\\n    }\\n\\n    if (this.dir === \'rtl\') {\\n      this.openActiveItemSubMenu(event);\\n      return;\\n    }\\n\\n    this.closeActiveItemSubMenu(event);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'window:keydown.Enter\', [\'$event\'])\\n  @HostListener(\'window:keydown.Space\', [\'$event\'])\\n  public onKeyEnterOrSpace(event: KeyboardEvent): void {\\n    if (!this.isLeaf) {\\n      return;\\n    }\\n\\n    if (!this.keyManager.activeItem) {\\n      return;\\n    }\\n\\n    this.onMenuItemSelect(this.keyManager.activeItem, event);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'window:keydown.Escape\', [\'$event\'])\\n  public onKeyArrowEscape(event: KeyboardEvent): void {\\n    if (!this.isLeaf) {\\n      return;\\n    }\\n\\n    this.closeActiveItemSubMenu(event);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  @HostListener(\'document:click\', [\'$event\'])\\n  @HostListener(\'document:contextmenu\', [\'$event\'])\\n  public onClickOrRightClick(event: MouseEvent): void {\\n    if (event.type === \'click\' && event.button === 2) {\\n      return;\\n    }\\n\\n    if (this._elementRef.nativeElement.contains(event.target as Node)) {\\n      return;\\n    }\\n\\n    this.closeAllMenus.emit({ event });\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public stopEvent(event: MouseEvent) {\\n    event.stopPropagation();\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public isMenuItemDisabled(menuItem: ContextMenuItemDirective<T>): boolean {\\n    return evaluateIfFunction(menuItem.disabled, this.value);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public isMenuItemVisible(menuItem: ContextMenuItemDirective<T>): boolean {\\n    return evaluateIfFunction(menuItem.visible, this.value);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public onOpenSubMenu(\\n    menuItem: ContextMenuItemDirective<T>,\\n    event: MouseEvent | KeyboardEvent\\n  ): void {\\n    if (!menuItem.subMenu) {\\n      this.closeSubMenus.next();\\n    }\\n\\n    if (this.keyManager.activeItemIndex === null || !menuItem.subMenu) {\\n      return;\\n    }\\n\\n    const anchorElementRef =\\n      this.liElementRefs.toArray()[this.keyManager.activeItemIndex];\\n    const anchorElement = anchorElementRef && anchorElementRef.nativeElement;\\n\\n    if (anchorElement && event instanceof KeyboardEvent) {\\n      this.openSubMenu.emit({\\n        anchoredTo: \'element\',\\n        anchorElement,\\n        contextMenu: menuItem.subMenu,\\n        value: this.value,\\n        parentContextMenu: this,\\n      });\\n    } else if (event.currentTarget) {\\n      this.openSubMenu.emit({\\n        anchoredTo: \'element\',\\n        anchorElement: event.currentTarget,\\n        contextMenu: menuItem.subMenu,\\n        value: this.value,\\n        parentContextMenu: this,\\n      });\\n    } else {\\n      this.openSubMenu.emit({\\n        anchoredTo: \'position\',\\n        x: (event as MouseEvent).clientX,\\n        y: (event as MouseEvent).clientY,\\n        contextMenu: menuItem.subMenu,\\n        value: this.value,\\n      });\\n    }\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public onMenuItemSelect(\\n    menuItem: ContextMenuItemDirective<T>,\\n    event: MouseEvent | KeyboardEvent\\n  ): void {\\n    this.cancelEvent(event);\\n    this.onOpenSubMenu(menuItem, event);\\n    if (!menuItem.subMenu) {\\n      this.triggerExecute(menuItem, event);\\n    }\\n  }\\n\\n  private triggerExecute(\\n    menuItem: ContextMenuItemDirective<T>,\\n    event: MouseEvent | KeyboardEvent\\n  ): void {\\n    menuItem.triggerExecute(event, this.value);\\n  }\\n\\n  private setupDirectives() {\\n    this.menuDirectives.forEach((menuDirective) => {\\n      menuDirective.value = this.value;\\n      this.subscription.add(\\n        menuDirective.execute.subscribe((event) =>\\n          this.execute.emit({ ...event, menuDirective })\\n        )\\n      );\\n    });\\n    const queryList = new QueryList<ContextMenuItemDirective<T>>();\\n    queryList.reset(this.menuDirectives);\\n    this.keyManager = new TESTING_WRAPPER.ActiveDescendantKeyManager<\\n      ContextMenuItemDirective<T>\\n    >(queryList).withWrap();\\n  }\\n\\n  private openActiveItemSubMenu(event: KeyboardEvent) {\\n    if (this.keyManager.activeItemIndex === null) {\\n      return;\\n    }\\n\\n    this.cancelEvent(event);\\n\\n    if (this.keyManager.activeItem) {\\n      this.onOpenSubMenu(this.keyManager.activeItem, event);\\n    }\\n  }\\n\\n  private closeActiveItemSubMenu(event: KeyboardEvent) {\\n    if (this.keyManager.activeItemIndex === null) {\\n      return;\\n    }\\n\\n    this.cancelEvent(event);\\n\\n    this.closeLeafMenu.emit({\\n      excludeRootMenu:\\n        this.dir === \'rtl\'\\n          ? event.keyCode === ARROW_RIGHT_KEYCODE\\n          : event.keyCode === ARROW_LEFT_KEYCODE,\\n      event,\\n    });\\n  }\\n\\n  private cancelEvent(event?: MouseEvent | KeyboardEvent): void {\\n    if (!event || !event.target) {\\n      return;\\n    }\\n\\n    const target = event.target as HTMLElement;\\n    if (\\n      [\'INPUT\', \'TEXTAREA\', \'SELECT\'].includes(target.tagName) ||\\n      target.isContentEditable\\n    ) {\\n      return;\\n    }\\n\\n    event.preventDefault();\\n    event.stopPropagation();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"_elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":""}],"line":132,"jsdoctags":[{"name":"_elementRef","type":"ElementRef<HTMLElement>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"implements":["OnInit","OnDestroy","AfterViewInit"],"templateData":"<div class=\\"ngx-contextmenu\\" [ngClass]=\\"menuClass\\" [attr.dir]=\\"dir\\">\\n  <ul #menu class=\\"ngx-contextmenu--dropdown-menu\\" role=\\"menu\\" tabindex=\\"0\\">\\n    <li\\n      #li\\n      *ngFor=\\"let menuDirective of menuDirectives; let i = index\\"\\n      [class.disabled]=\\"isMenuItemDisabled(menuDirective)\\"\\n      [class.divider]=\\"menuDirective.divider\\"\\n      [class.active]=\\"\\n        menuDirective.isActive && !isMenuItemDisabled(menuDirective)\\n      \\"\\n      [attr.role]=\\"menuDirective.divider ? \'separator\' : undefined\\"\\n      role=\\"none\\"\\n    >\\n      <hr *ngIf=\\"menuDirective.divider\\" role=\\"separator\\" />\\n      <button\\n        *ngIf=\\"!menuDirective.divider && !menuDirective.passive\\"\\n        type=\\"button\\"\\n        role=\\"menuitem\\"\\n        class=\\"ngx-contextmenu--item-content\\"\\n        [attr.aria-haspopup]=\\"!!menuDirective.subMenu\\"\\n        [class.ngx-contextmenu--parent-menu]=\\"!!menuDirective.subMenu\\"\\n        [class.active]=\\"\\n          menuDirective.isActive && !isMenuItemDisabled(menuDirective)\\n        \\"\\n        [class.disabled]=\\"isMenuItemDisabled(menuDirective)\\"\\n        [attr.disabled]=\\"isMenuItemDisabled(menuDirective) ? \'disabled\' : null\\"\\n        (click)=\\"onMenuItemSelect(menuDirective, $event)\\"\\n        (mouseenter)=\\"onOpenSubMenu(menuDirective, $event)\\"\\n      >\\n        <ng-template\\n          [ngTemplateOutlet]=\\"menuDirective.template\\"\\n          [ngTemplateOutletContext]=\\"{ item: value }\\"\\n        ></ng-template>\\n      </button>\\n\\n      <span\\n        *ngIf=\\"!menuDirective.divider && menuDirective.passive\\"\\n        class=\\"ngx-contextmenu--item-content ngx-contextmenu--item-content-passive\\"\\n        role=\\"menuitem\\"\\n        (click)=\\"stopEvent($event)\\"\\n        (contextmenu)=\\"stopEvent($event)\\"\\n        [class.disabled]=\\"isMenuItemDisabled(menuDirective)\\"\\n      >\\n        <ng-template\\n          [ngTemplateOutlet]=\\"menuDirective.template\\"\\n          [ngTemplateOutletContext]=\\"{ item: value }\\"\\n        ></ng-template>\\n      </span>\\n    </li>\\n  </ul>\\n</div>\\n"},{"name":"NgxContextMenuComponent","id":"component-NgxContextMenuComponent-a1d95330558f74327b68325ea783df1483af32235cc4f47b0d5cbc66ea111a18b0de4a9709a6c793b3890bdbea14a4f921a3a3f937510194110c2b1d63d4f522","file":"src/stories/ngx-contextmenu/ngx-contextmenu.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-ngx-contextmenu","styleUrls":["./ngx-contextmenu.component.scss"],"styles":[],"templateUrl":["ngx-contextmenu.component.html"],"viewProviders":[],"inputsClass":[{"name":"demoMode","defaultValue":"\'simple\'","deprecated":false,"deprecationMessage":"","line":33,"type":"\\"simple\\" | \\"form\\"","decorators":[]},{"name":"dir","deprecated":false,"deprecationMessage":"","line":27,"type":"\\"ltr\\" | \\"rtl\\" | undefined","decorators":[]},{"name":"disabled","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":24,"type":"boolean","decorators":[]},{"name":"item","defaultValue":"\'a user defined item\'","deprecated":false,"deprecationMessage":"","line":30,"type":"","decorators":[]},{"name":"menuClass","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","line":21,"type":"string","decorators":[]},{"name":"programmaticOpen","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":36,"type":"boolean","decorators":[]}],"outputsClass":[{"name":"onClose","defaultValue":"new EventEmitter<\'void\'>()","deprecated":false,"deprecationMessage":"","line":42,"type":"EventEmitter"},{"name":"onMenuItemExecuted","defaultValue":"new EventEmitter<string>()","deprecated":false,"deprecationMessage":"","line":45,"type":"EventEmitter"},{"name":"onOpen","defaultValue":"new EventEmitter<ContextMenuOpenEvent<unknown>>()","deprecated":false,"deprecationMessage":"","line":39,"type":"EventEmitter"}],"propertiesClass":[{"name":"contextMenuDirective","deprecated":false,"deprecationMessage":"","type":"ContextMenuDirective<void>","optional":true,"description":"","line":51,"rawdescription":"\\n\\n","decorators":[{"name":"ViewChild","stringifiedArguments":"ContextMenuDirective"}],"modifierKind":[123],"jsdoctags":[{"pos":942,"end":955,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":943,"end":951,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"internal"},"comment":""}]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[]},{"name":"execute","args":[{"name":"text","type":"string","deprecated":false,"deprecationMessage":""},{"name":"value","type":"any","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":56,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"text","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","type":"any","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"open","args":[{"name":"value","type":"ContextMenuOpenEvent<>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\n","description":"","modifierKind":[123],"jsdoctags":[{"name":"value","type":"ContextMenuOpenEvent<>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import {\\n  Component,\\n  EventEmitter,\\n  Input,\\n  Output,\\n  ViewChild,\\n} from \'@angular/core\';\\nimport {\\n  ContextMenuComponent,\\n  ContextMenuDirective,\\n  ContextMenuOpenEvent,\\n} from \'@perfectmemory/ngx-contextmenu\';\\n\\n@Component({\\n  selector: \'storybook-ngx-contextmenu\',\\n  templateUrl: \'ngx-contextmenu.component.html\',\\n  styleUrls: [\'./ngx-contextmenu.component.scss\'],\\n})\\nexport default class NgxContextMenuComponent {\\n  @Input()\\n  public menuClass = \'\';\\n\\n  @Input()\\n  public disabled = false;\\n\\n  @Input()\\n  public dir: \'ltr\' | \'rtl\' | undefined;\\n\\n  @Input()\\n  public item: unknown = \'a user defined item\';\\n\\n  @Input()\\n  public demoMode: \'simple\' | \'form\' = \'simple\';\\n\\n  @Input()\\n  public programmaticOpen = false;\\n\\n  @Output()\\n  public onOpen = new EventEmitter<ContextMenuOpenEvent<unknown>>();\\n\\n  @Output()\\n  public onClose = new EventEmitter<\'void\'>();\\n\\n  @Output()\\n  public onMenuItemExecuted = new EventEmitter<string>();\\n\\n  /**\\n   * @internal\\n   */\\n  @ViewChild(ContextMenuDirective)\\n  public contextMenuDirective?: ContextMenuDirective<void>;\\n\\n  /**\\n   * @internal\\n   */\\n  public execute(text: string, value: any) {\\n    console.log(value);\\n    this.onMenuItemExecuted.next(`${text}: ${value.value}`);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public open(value: ContextMenuOpenEvent<unknown>) {\\n    this.onOpen.next(value);\\n  }\\n\\n  /**\\n   * @internal\\n   */\\n  public close() {\\n    this.onClose.next(\'void\');\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"label {\\n  input,\\n  span {\\n    display: inline-block;\\n    vertical-align: middle;\\n  }\\n}\\n\\n.menu-item-title {\\n  text-transform: uppercase;\\n}\\n\\n.ngx-context-menu-focusable {\\n  &:focus {\\n    border-bottom: var(--ngx-contextmenu-focusable-border-bottom);\\n    outline: none;\\n  }\\n}\\n","styleUrl":"./ngx-contextmenu.component.scss"}],"stylesData":"","templateData":"<span\\n  *ngIf=\\"!disabled; else disabledTemplate\\"\\n  class=\\"ngx-context-menu-focusable\\"\\n  #ngxContextMenu=\\"ngxContextMenu\\"\\n  [contextMenu]=\\"contextMenu\\"\\n  [contextMenuValue]=\\"item\\"\\n>\\n  <ng-container *ngIf=\\"demoMode === \'simple\'\\">\\n    When you right click on this text, a context menu will appear\\n  </ng-container>\\n  <ng-container *ngIf=\\"demoMode === \'form\'\\">\\n    When you right click on this text, a context menu with form inputs will\\n    appear\\n  </ng-container>\\n  <span *ngIf=\\"dir === \'rtl\'\\"> in the right to left direction</span>\\n</span>\\n\\n<ng-template #disabledTemplate>\\n  <span\\n    class=\\"ngx-context-menu-focusable\\"\\n    [contextMenu]=\\"contextMenu\\"\\n    [contextMenuValue]=\\"item\\"\\n  >\\n    When you right click on this text, no context menu will appear because it is\\n    disabled\\n  </span>\\n</ng-template>\\n\\n<context-menu\\n  #contextMenu\\n  [menuClass]=\\"menuClass\\"\\n  [disabled]=\\"disabled\\"\\n  [dir]=\\"dir\\"\\n  (open)=\\"open($event)\\"\\n  (close)=\\"close()\\"\\n>\\n  <ng-template contextMenuItem passive=\\"true\\"\\n    ><span class=\\"menu-item-title\\">Context menu title</span></ng-template\\n  >\\n  <ng-template\\n    *ngIf=\\"demoMode === \'simple\'\\"\\n    contextMenuItem\\n    (execute)=\\"execute(\'Cut\', $event)\\"\\n    >Cut</ng-template\\n  >\\n  <ng-template\\n    *ngIf=\\"demoMode === \'simple\'\\"\\n    contextMenuItem\\n    (execute)=\\"execute(\'Copy\', $event)\\"\\n    >Copy</ng-template\\n  >\\n  <ng-template\\n    *ngIf=\\"demoMode === \'simple\'\\"\\n    contextMenuItem\\n    (execute)=\\"execute(\'Paste\', $event)\\"\\n    >Paste</ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'simple\'\\" contextMenuItem [disabled]=\\"true\\"\\n    >Disabled menu item</ng-template\\n  >\\n  <ng-template\\n    *ngIf=\\"demoMode === \'simple\'\\"\\n    contextMenuItem\\n    divider=\\"true\\"\\n  ></ng-template>\\n  <ng-template\\n    *ngIf=\\"demoMode === \'simple\'\\"\\n    contextMenuItem\\n    [subMenu]=\\"specialPast\\"\\n    >Special pastes...</ng-template\\n  >\\n\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice A\\" /> <span>Choice A</span></label\\n    ></ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice B\\" /> <span>Choice B</span></label\\n    ></ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice C\\" /> <span>Choice C</span></label\\n    ></ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice D\\" /> <span>Choice D</span></label\\n    ></ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice E\\" /> <span>Choice E</span></label\\n    ></ng-template\\n  >\\n  <ng-template *ngIf=\\"demoMode === \'form\'\\" contextMenuItem passive=\\"true\\"\\n    ><label\\n      ><input type=\\"checkbox\\" value=\\"Choice E\\" /> <span>Choice E</span></label\\n    ></ng-template\\n  >\\n</context-menu>\\n<context-menu #specialPast>\\n  <ng-template contextMenuItem (execute)=\\"execute(\'Paste as HTML\', $event)\\"\\n    >Paste as HTML</ng-template\\n  >\\n  <ng-template contextMenuItem (execute)=\\"execute(\'Paste unformatted\', $event)\\"\\n    >Paste unformatted</ng-template\\n  >\\n</context-menu>\\n<br>\\n<br>\\n<br>\\n<br>\\n<button class=\\"button\\" *ngIf=\\"programmaticOpen\\" (click)=\\"contextMenuDirective?.open($event)\\">\\n  Click here to show the context menu normally attached to the text above\\n</button>\\n"}],"modules":[{"name":"AppModule","id":"module-AppModule-d383f5a0bbf5684f2e4e8da4e3fbdb455e73d351183cffb2ffd6d0c00bfd16e42969d645df0aee54b8037eaabb767f4eaf6534706f2a9ed265391c5e77eeb55f","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app.module.ts","methods":[],"sourceCode":"// import { ScrollDispatchModule } from \'@angular/cdk/scrolling\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { NgModule } from \'@angular/core\';\\nimport { BrowserModule } from \'@angular/platform-browser\';\\nimport { RouterModule } from \'@angular/router\';\\nimport { ContextMenuModule } from \'@perfectmemory/ngx-contextmenu\';\\nimport { AppComponent } from \'./app.component\';\\nimport { ChildOneComponent } from \'./components/child1.component\';\\nimport { ChildTwoComponent } from \'./components/child2.component\';\\n\\n@NgModule({\\n  bootstrap: [AppComponent],\\n  declarations: [AppComponent, ChildOneComponent, ChildTwoComponent],\\n  imports: [\\n    BrowserModule,\\n    CommonModule,\\n    ContextMenuModule,\\n    RouterModule.forRoot([\\n      {\\n        path: \'two\',\\n        component: ChildTwoComponent,\\n      },\\n      {\\n        path: \'**\',\\n        component: ChildOneComponent,\\n      },\\n    ]),\\n  ],\\n})\\nexport class AppModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"},{"name":"ChildOneComponent"},{"name":"ChildTwoComponent"}]},{"type":"imports","elements":[{"name":"ContextMenuModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]},{"name":"AppRoutingModule","id":"module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app-routing.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { RouterModule, Routes } from \'@angular/router\';\\n\\nconst routes: Routes = [];\\n\\n@NgModule({\\n  imports: [RouterModule.forRoot(routes)],\\n  exports: [RouterModule]\\n})\\nexport class AppRoutingModule { }\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]},{"name":"ContextMenuModule","id":"module-ContextMenuModule-81b57efd98333ccd440bbab61c8db708207f22a33b956060e08c38fffe06a35bcd445e3e070f93f262e383ef84441b3d5de5a63d3ee419f457eaa88a4eb4fe82","description":"","deprecationMessage":"","deprecated":false,"file":"projects/ngx-contextmenu/src/lib/ngx-contextmenu.module.ts","methods":[],"sourceCode":"import {\\n  FullscreenOverlayContainer,\\n  OverlayContainer,\\n  OverlayModule,\\n} from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { NgModule } from \'@angular/core\';\\nimport { ContextMenuContentComponent } from \'./components/context-menu-content/context-menu-content.component\';\\nimport { ContextMenuComponent } from \'./components/context-menu/context-menu.component\';\\nimport { ContextMenuItemDirective } from \'./directives/context-menu-item/context-menu-item.directive\';\\nimport { ContextMenuDirective } from \'./directives/context-menu/context-menu.directive\';\\n\\n@NgModule({\\n  declarations: [\\n    ContextMenuDirective,\\n    ContextMenuComponent,\\n    ContextMenuContentComponent,\\n    ContextMenuItemDirective,\\n  ],\\n  providers: [\\n    { provide: OverlayContainer, useClass: FullscreenOverlayContainer },\\n  ],\\n  exports: [\\n    ContextMenuDirective,\\n    ContextMenuComponent,\\n    ContextMenuItemDirective,\\n  ],\\n  imports: [CommonModule, OverlayModule],\\n})\\nexport class ContextMenuModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"ContextMenuComponent"},{"name":"ContextMenuContentComponent"},{"name":"ContextMenuDirective"},{"name":"ContextMenuItemDirective"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"ContextMenuComponent"},{"name":"ContextMenuDirective"},{"name":"ContextMenuItemDirective"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"ARROW_LEFT_KEYCODE","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"37"},{"name":"ARROW_RIGHT_KEYCODE","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"39"},{"name":"Demo","ctype":"miscellaneous","subtype":"variable","file":"src/stories/ContextMenu.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true\\n}"},{"name":"evaluateIfFunction","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/helper/evaluate.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"<T>(\\n  value: boolean | ((value?: T) => boolean),\\n  item?: T\\n): boolean => {\\n  if (value instanceof Function) {\\n    return value(item);\\n  }\\n  return value;\\n}"},{"name":"getPositionsToAnchorElement","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  } else {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  }\\n}"},{"name":"getPositionsToAnchorElement","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  } else {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  }\\n}"},{"name":"getPositionsToXY","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'center\',\\n        overlayX: \'start\',\\n        overlayY: \'center\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'center\',\\n        overlayX: \'end\',\\n        overlayY: \'center\',\\n      },\\n    ];\\n  }\\n\\n  return [\\n    {\\n      originX: \'end\',\\n      originY: \'bottom\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'bottom\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'start\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'center\',\\n      overlayX: \'end\',\\n      overlayY: \'center\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'center\',\\n      overlayX: \'start\',\\n      overlayY: \'center\',\\n    },\\n  ];\\n}"},{"name":"getPositionsToXY","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'center\',\\n        overlayX: \'start\',\\n        overlayY: \'center\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'center\',\\n        overlayX: \'end\',\\n        overlayY: \'center\',\\n      },\\n    ];\\n  }\\n\\n  return [\\n    {\\n      originX: \'end\',\\n      originY: \'bottom\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'bottom\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'start\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'center\',\\n      overlayX: \'end\',\\n      overlayY: \'center\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'center\',\\n      overlayX: \'start\',\\n      overlayY: \'center\',\\n    },\\n  ];\\n}"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/ContextMenu.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NgxContextMenuComponent>","defaultValue":"(\\n  args: NgxContextMenuComponent\\n) => ({\\n  styles: [\'./assets/stylesheets/index.scss\'],\\n  props: args,\\n})"},{"name":"TESTING_WRAPPER","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ActiveDescendantKeyManager,\\n}","rawdescription":"For testing purpose only","description":"<p>For testing purpose only</p>\\n"}],"functions":[],"typealiases":[{"name":"ContextMenuCloseEvent","ctype":"miscellaneous","subtype":"typealias","rawtype":"ContextMenuExecuteEvent<T> | ContextMenuCancelEvent","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":true,"deprecationMessage":"Not used any more","description":"","kind":186},{"name":"ContextMenuOpenEvent","ctype":"miscellaneous","subtype":"typealias","rawtype":"ContextMenuAnchoredToPositionEvent<T> | ContextMenuAnchoredToElementEvent<T>","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"IContextMenuContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","description":"","kind":187}],"enumerations":[],"groupedVariables":{"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts":[{"name":"ARROW_LEFT_KEYCODE","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"37"},{"name":"ARROW_RIGHT_KEYCODE","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"39"},{"name":"TESTING_WRAPPER","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  ActiveDescendantKeyManager,\\n}","rawdescription":"For testing purpose only","description":"<p>For testing purpose only</p>\\n"}],"src/stories/ContextMenu.stories.ts":[{"name":"Demo","ctype":"miscellaneous","subtype":"variable","file":"src/stories/ContextMenu.stories.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Template.bind({})"},{"name":"Template","ctype":"miscellaneous","subtype":"variable","file":"src/stories/ContextMenu.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story<NgxContextMenuComponent>","defaultValue":"(\\n  args: NgxContextMenuComponent\\n) => ({\\n  styles: [\'./assets/stylesheets/index.scss\'],\\n  props: args,\\n})"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false\\n}"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true\\n}"}],"projects/ngx-contextmenu/src/lib/helper/evaluate.ts":[{"name":"evaluateIfFunction","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/helper/evaluate.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"<T>(\\n  value: boolean | ((value?: T) => boolean),\\n  item?: T\\n): boolean => {\\n  if (value instanceof Function) {\\n    return value(item);\\n  }\\n  return value;\\n}"}],"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts":[{"name":"getPositionsToAnchorElement","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  } else {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  }\\n}"},{"name":"getPositionsToXY","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'center\',\\n        overlayX: \'start\',\\n        overlayY: \'center\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'center\',\\n        overlayX: \'end\',\\n        overlayY: \'center\',\\n      },\\n    ];\\n  }\\n\\n  return [\\n    {\\n      originX: \'end\',\\n      originY: \'bottom\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'bottom\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'start\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'center\',\\n      overlayX: \'end\',\\n      overlayY: \'center\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'center\',\\n      overlayX: \'start\',\\n      overlayY: \'center\',\\n    },\\n  ];\\n}"}],"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts":[{"name":"getPositionsToAnchorElement","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  } else {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'end\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n    ];\\n  }\\n}"},{"name":"getPositionsToXY","ctype":"miscellaneous","subtype":"variable","file":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"(\\n  dir: \'rtl\' | \'ltr\' = \'ltr\'\\n): ConnectedPosition[] => {\\n  if (dir === \'ltr\') {\\n    return [\\n      {\\n        originX: \'start\',\\n        originY: \'bottom\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'bottom\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'top\',\\n        overlayX: \'start\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'top\',\\n        overlayX: \'end\',\\n        overlayY: \'top\',\\n      },\\n      {\\n        originX: \'end\',\\n        originY: \'center\',\\n        overlayX: \'start\',\\n        overlayY: \'center\',\\n      },\\n      {\\n        originX: \'start\',\\n        originY: \'center\',\\n        overlayX: \'end\',\\n        overlayY: \'center\',\\n      },\\n    ];\\n  }\\n\\n  return [\\n    {\\n      originX: \'end\',\\n      originY: \'bottom\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'bottom\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'top\',\\n      overlayX: \'end\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'top\',\\n      overlayX: \'start\',\\n      overlayY: \'top\',\\n    },\\n    {\\n      originX: \'start\',\\n      originY: \'center\',\\n      overlayX: \'end\',\\n      overlayY: \'center\',\\n    },\\n    {\\n      originX: \'end\',\\n      originY: \'center\',\\n      overlayX: \'start\',\\n      overlayY: \'center\',\\n    },\\n  ];\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts":[{"name":"ContextMenuCloseEvent","ctype":"miscellaneous","subtype":"typealias","rawtype":"ContextMenuExecuteEvent<T> | ContextMenuCancelEvent","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":true,"deprecationMessage":"Not used any more","description":"","kind":186},{"name":"ContextMenuOpenEvent","ctype":"miscellaneous","subtype":"typealias","rawtype":"ContextMenuAnchoredToPositionEvent<T> | ContextMenuAnchoredToElementEvent<T>","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","description":"","kind":186},{"name":"IContextMenuContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","deprecated":false,"deprecationMessage":"","description":"","kind":187}]}},"routes":[],"coverage":{"count":23,"status":"low","files":[{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","type":"component","linktype":"component","name":"ContextMenuContentComponent","coveragePercent":26,"coverageCount":"12/46","status":"medium"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ARROW_LEFT_KEYCODE","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"ARROW_RIGHT_KEYCODE","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu-content/context-menu-content.component.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"TESTING_WRAPPER","coveragePercent":100,"coverageCount":"1/1","status":"very-good"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"getPositionsToAnchorElement","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.helpers.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"getPositionsToXY","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuAnchoredToElementEvent","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuAnchoredToPositionEvent","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuBaseEvent","coveragePercent":50,"coverageCount":"2/4","status":"medium"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuCancelEvent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuCloseLeafEvent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.interface.ts","type":"interface","linktype":"interface","name":"ContextMenuExecuteEvent","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/components/context-menu/context-menu.component.ts","type":"component","linktype":"component","name":"ContextMenuComponent","coveragePercent":31,"coverageCount":"7/22","status":"medium"},{"filePath":"projects/ngx-contextmenu/src/lib/directives/context-menu-item/context-menu-item.directive.ts","type":"directive","linktype":"directive","name":"ContextMenuItemDirective","coveragePercent":40,"coverageCount":"6/15","status":"medium"},{"filePath":"projects/ngx-contextmenu/src/lib/directives/context-menu/context-menu.directive.ts","type":"directive","linktype":"directive","name":"ContextMenuDirective","coveragePercent":58,"coverageCount":"7/12","status":"good"},{"filePath":"projects/ngx-contextmenu/src/lib/helper/evaluate.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"evaluateIfFunction","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"getPositionsToAnchorElement","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/models/context-menu-position-helpers/context-menu-position-helpers.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"getPositionsToXY","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu-event/context-menu-event.service.ts","type":"injectable","linktype":"injectable","name":"ContextMenuEventService","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu-stack/context-menu-stack.service.ts","type":"injectable","linktype":"injectable","name":"ContextMenuStackService","coveragePercent":53,"coverageCount":"7/13","status":"good"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu-stack/context-menu-stack.service.ts","type":"interface","linktype":"interface","name":"ContextMenuStackItem","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","type":"injectable","linktype":"injectable","name":"ContextMenuService","coveragePercent":80,"coverageCount":"4/5","status":"very-good"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","type":"interface","linktype":"interface","name":"ContextMenuOpenAtElementOptions","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"projects/ngx-contextmenu/src/lib/services/context-menu/context-menu.service.ts","type":"interface","linktype":"interface","name":"ContextMenuOpenAtPositionOptions","coveragePercent":75,"coverageCount":"3/4","status":"good"},{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/13","status":"low"},{"filePath":"src/app/components/child1.component.ts","type":"component","linktype":"component","name":"ChildOneComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/app/components/child2.component.ts","type":"component","linktype":"component","name":"ChildTwoComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/ContextMenu.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Demo","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/ContextMenu.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Template","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/ngx-contextmenu/ngx-contextmenu.component.ts","type":"component","linktype":"component","name":"NgxContextMenuComponent","coveragePercent":0,"coverageCount":"0/14","status":"low"}]}}');(0,angular.P)(documentation_namespaceObject);var parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}},options:{storySort:{order:["Context Menu",["Introduction","Installation and setup","Demo","Documentation",["In a nutshell","[contextMenu]","<context-menu>","[contextMenuItem]","ContextMenuService","Styling","Keyboard navigation"],"FAQ","Changelog"]]}},docs:{inlineStories:!0}},__namedExportsOrder=["parameters"]},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api");const external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject=__STORYBOOK_MODULE_CHANNEL_POSTMESSAGE__,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject=__STORYBOOK_MODULE_CHANNEL_WEBSOCKET__;var asyncToGenerator=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.Z)((function*(path){if(!/^\.[\\/](?:src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.mdx)$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.Z)((function*(path){if(!/^\.[\\/](?:src(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(6);return __webpack_require__("./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.Z)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline((()=>importers[i](path)));if(moduleExports)return moduleExports}}))).apply(this,arguments)}const channel=(0,external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject.createChannel)({page:"preview"});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel);const serverChannel=(0,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject.createChannel)({});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setServerChannel(serverChannel),window.__STORYBOOK_SERVER_CHANNEL__=serverChannel;const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb;window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel,window.__STORYBOOK_CLIENT_API__=new external_STORYBOOK_MODULE_PREVIEW_API_.ClientApi({storyStore:preview.storyStore}),preview.initialize({importFn:function importFn(_x3){return _importFn.apply(this,arguments)},getProjectAnnotations:()=>(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)([__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-links/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/preview.mjs"),__webpack_require__("./.storybook/preview.js")])})},"./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./stories/ContextMenu.stories":["./src/stories/ContextMenu.stories.ts",517,746],"./stories/ContextMenu.stories.ts":["./src/stories/ContextMenu.stories.ts",517,746]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./stories/APContextMenuService.stories.mdx":["./src/stories/APContextMenuService.stories.mdx",715,331],"./stories/APIContextMenuComponent.stories.mdx":["./src/stories/APIContextMenuComponent.stories.mdx",715,557],"./stories/APIContextMenuDirective.stories.mdx":["./src/stories/APIContextMenuDirective.stories.mdx",715,612],"./stories/APIContextMenuItemDirective.stories.mdx":["./src/stories/APIContextMenuItemDirective.stories.mdx",715,8],"./stories/APIIntroduction.stories.mdx":["./src/stories/APIIntroduction.stories.mdx",715,858],"./stories/APIKeyboardNavigation.stories.mdx":["./src/stories/APIKeyboardNavigation.stories.mdx",715,952],"./stories/APIStyling.stories.mdx":["./src/stories/APIStyling.stories.mdx",715,143],"./stories/Changelog.stories.mdx":["./src/stories/Changelog.stories.mdx",715,534],"./stories/Faq.stories.mdx":["./src/stories/Faq.stories.mdx",715,122],"./stories/Introduction.stories.mdx":["./src/stories/Introduction.stories.mdx",715,991],"./stories/Setup.stories.mdx":["./src/stories/Setup.stories.mdx",715,758]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src lazy recursive ^\\.\\/.*$ include: (?:\\/src(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$",module.exports=webpackAsyncContext},"@storybook/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"@storybook/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"@storybook/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"@storybook/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[307],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./node_modules/@angular/compiler/fesm2022/compiler.mjs"),__webpack_exec__("./src/stories/assets/stylesheets/index.scss?ngGlobalStyle"),__webpack_exec__("./node_modules/@angular/cdk/overlay-prebuilt.css?ngGlobalStyle"),__webpack_exec__("./projects/ngx-contextmenu/src/assets/stylesheets/base.scss?ngGlobalStyle"))));__webpack_require__.O()}]);